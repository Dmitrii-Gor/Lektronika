
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006000  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006360  08006360  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006368  08006368  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  080063e0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08006480  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00010b10  200001b0  08006520  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20010cc0  08006520  00020cc0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017704  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e6a  00000000  00000000  000378e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001200  00000000  00000000  0003a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010e0  00000000  00000000  0003b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a64c  00000000  00000000  0003ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000160b7  00000000  00000000  0006707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fda4c  00000000  00000000  0007d133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017ab7f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055a0  00000000  00000000  0017abd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         00000024  00000000  00000000  00180170  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000004e  00000000  00000000  00180194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	080061e8 	.word	0x080061e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	080061e8 	.word	0x080061e8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <create_matrix>:
#define COLS 64

int matrix[ROWS][COLS];
int new_generation_matrix[ROWS][COLS];
void create_matrix(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
    for(int i=0; i<ROWS; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e013      	b.n	8000618 <create_matrix+0x34>
    {
        for(int j=0; j<COLS; j++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	e00a      	b.n	800060c <create_matrix+0x28>
        {
            matrix[i][j] = 0;
 80005f6:	490d      	ldr	r1, [pc, #52]	; (800062c <create_matrix+0x48>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	019a      	lsls	r2, r3, #6
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	2200      	movs	r2, #0
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(int j=0; j<COLS; j++)
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2b3f      	cmp	r3, #63	; 0x3f
 8000610:	ddf1      	ble.n	80005f6 <create_matrix+0x12>
    for(int i=0; i<ROWS; i++)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b7f      	cmp	r3, #127	; 0x7f
 800061c:	dde8      	ble.n	80005f0 <create_matrix+0xc>
        }
    }
}
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	200001cc 	.word	0x200001cc

08000630 <set_matrix_population>:


void set_matrix_population(int counter_life)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    srand(time(NULL));
 8000638:	2000      	movs	r0, #0
 800063a:	f004 fda7 	bl	800518c <time>
 800063e:	4602      	mov	r2, r0
 8000640:	460b      	mov	r3, r1
 8000642:	4610      	mov	r0, r2
 8000644:	4619      	mov	r1, r3
 8000646:	f004 fd35 	bl	80050b4 <srand>
    int counter = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
    for(int i=0; i<ROWS; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	e02d      	b.n	80006b0 <set_matrix_population+0x80>
    {
        for(int j=0; j<COLS; j++)
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e022      	b.n	80006a0 <set_matrix_population+0x70>
        {
            if(counter == counter_life) // огранчение на 20 единичек в матрице
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	429a      	cmp	r2, r3
 8000660:	d022      	beq.n	80006a8 <set_matrix_population+0x78>
            {
                break;
            }
            matrix[i][j] = rand()%2;
 8000662:	f004 fd55 	bl	8005110 <rand>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	bfb8      	it	lt
 8000670:	425b      	neglt	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	4812      	ldr	r0, [pc, #72]	; (80006c0 <set_matrix_population+0x90>)
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	0199      	lsls	r1, r3, #6
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	440b      	add	r3, r1
 800067e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            if(matrix[i][j] == 1)
 8000682:	490f      	ldr	r1, [pc, #60]	; (80006c0 <set_matrix_population+0x90>)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	019a      	lsls	r2, r3, #6
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d102      	bne.n	800069a <set_matrix_population+0x6a>
            {
                counter++;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
        for(int j=0; j<COLS; j++)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3301      	adds	r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b3f      	cmp	r3, #63	; 0x3f
 80006a4:	ddd9      	ble.n	800065a <set_matrix_population+0x2a>
 80006a6:	e000      	b.n	80006aa <set_matrix_population+0x7a>
                break;
 80006a8:	bf00      	nop
    for(int i=0; i<ROWS; i++)
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	3301      	adds	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b7f      	cmp	r3, #127	; 0x7f
 80006b4:	ddce      	ble.n	8000654 <set_matrix_population+0x24>
    matrix[ROWS / 8][COLS / 8 ] = 1;
    matrix[(ROWS / 8) + 1][(COLS / 8) + 1] = 1;
    matrix[(ROWS / 8) + 1][(COLS / 8) + 2] = 1;
    matrix[(ROWS / 8) + 2][(COLS / 8)] = 1;
    matrix[(ROWS / 8) + 2][(COLS / 8) + 1] = 1;*/
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200001cc 	.word	0x200001cc

080006c4 <check_cell_neighbour>:
    printf("\n====================\n");
}


int check_cell_neighbour(int cell_index_x, int cell_index_y)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
   int counter = 0, counter_alive_cell = 0, x, y;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]

   for(int i = -1; i <= 1; i++)
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	e036      	b.n	800074c <check_cell_neighbour+0x88>
   {
        for(int j = -1; j<=1; j++)
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	e02c      	b.n	8000740 <check_cell_neighbour+0x7c>
        {
            x = (cell_index_x + j + ROWS) % ROWS;
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	4413      	add	r3, r2
 80006ec:	3380      	adds	r3, #128	; 0x80
 80006ee:	425a      	negs	r2, r3
 80006f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80006f8:	bf58      	it	pl
 80006fa:	4253      	negpl	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
            y = (cell_index_y + i + COLS) % COLS;
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	3340      	adds	r3, #64	; 0x40
 8000706:	425a      	negs	r2, r3
 8000708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800070c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000710:	bf58      	it	pl
 8000712:	4253      	negpl	r3, r2
 8000714:	60bb      	str	r3, [r7, #8]
            counter++;
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3301      	adds	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
            if(counter != 5 && matrix[x][y] == 1) // ячейка которую мы передали находится под 5 номером
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	2b05      	cmp	r3, #5
 8000720:	d00b      	beq.n	800073a <check_cell_neighbour+0x76>
 8000722:	490f      	ldr	r1, [pc, #60]	; (8000760 <check_cell_neighbour+0x9c>)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	019a      	lsls	r2, r3, #6
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4413      	add	r3, r2
 800072c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d102      	bne.n	800073a <check_cell_neighbour+0x76>
            {
               counter_alive_cell++;
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	3301      	adds	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
        for(int j = -1; j<=1; j++)
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	3301      	adds	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	2b01      	cmp	r3, #1
 8000744:	ddcf      	ble.n	80006e6 <check_cell_neighbour+0x22>
   for(int i = -1; i <= 1; i++)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	2b01      	cmp	r3, #1
 8000750:	ddc5      	ble.n	80006de <check_cell_neighbour+0x1a>
            }
        }
   }
    return counter_alive_cell;
 8000752:	69bb      	ldr	r3, [r7, #24]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3724      	adds	r7, #36	; 0x24
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	200001cc 	.word	0x200001cc

08000764 <cell_state_next_generation>:


bool cell_state_next_generation(int cell_index_x, int cell_index_y)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
    int counter_alive_cell;
    counter_alive_cell = check_cell_neighbour(cell_index_x, cell_index_y);
 800076e:	6839      	ldr	r1, [r7, #0]
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ffa7 	bl	80006c4 <check_cell_neighbour>
 8000776:	60f8      	str	r0, [r7, #12]
    if(matrix[cell_index_x][cell_index_y] == 0 && counter_alive_cell == 3)
 8000778:	4911      	ldr	r1, [pc, #68]	; (80007c0 <cell_state_next_generation+0x5c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	019a      	lsls	r2, r3, #6
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	4413      	add	r3, r2
 8000782:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d104      	bne.n	8000794 <cell_state_next_generation+0x30>
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2b03      	cmp	r3, #3
 800078e:	d101      	bne.n	8000794 <cell_state_next_generation+0x30>
    {
        return 1;
 8000790:	2301      	movs	r3, #1
 8000792:	e011      	b.n	80007b8 <cell_state_next_generation+0x54>
    }
    if(matrix[cell_index_x][cell_index_y] == 1 && (counter_alive_cell >= 2 && counter_alive_cell <= 3))
 8000794:	490a      	ldr	r1, [pc, #40]	; (80007c0 <cell_state_next_generation+0x5c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	019a      	lsls	r2, r3, #6
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	4413      	add	r3, r2
 800079e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d107      	bne.n	80007b6 <cell_state_next_generation+0x52>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	dd04      	ble.n	80007b6 <cell_state_next_generation+0x52>
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	dc01      	bgt.n	80007b6 <cell_state_next_generation+0x52>
    {
        return 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e000      	b.n	80007b8 <cell_state_next_generation+0x54>
    }
    return 0;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001cc 	.word	0x200001cc

080007c4 <check_new_generation>:


void check_new_generation(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
    for(int i = 0; i< ROWS; i++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	e018      	b.n	8000802 <check_new_generation+0x3e>
    {
        for(int j = 0; j<COLS; j++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	e00f      	b.n	80007f6 <check_new_generation+0x32>
        {
            new_generation_matrix[i][j] = cell_state_next_generation(i, j);
 80007d6:	6839      	ldr	r1, [r7, #0]
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ffc3 	bl	8000764 <cell_state_next_generation>
 80007de:	4603      	mov	r3, r0
 80007e0:	4618      	mov	r0, r3
 80007e2:	490c      	ldr	r1, [pc, #48]	; (8000814 <check_new_generation+0x50>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	019a      	lsls	r2, r3, #6
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for(int j = 0; j<COLS; j++)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b3f      	cmp	r3, #63	; 0x3f
 80007fa:	ddec      	ble.n	80007d6 <check_new_generation+0x12>
    for(int i = 0; i< ROWS; i++)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3301      	adds	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b7f      	cmp	r3, #127	; 0x7f
 8000806:	dde3      	ble.n	80007d0 <check_new_generation+0xc>
        }
    }
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200081cc 	.word	0x200081cc

08000818 <save_new_generation>:


void save_new_generation(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
    for(int i = 0; i< ROWS; i++)
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	e019      	b.n	8000858 <save_new_generation+0x40>
    {
        for(int j = 0; j<COLS; j++)
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	e010      	b.n	800084c <save_new_generation+0x34>
        {
            matrix[i][j] = new_generation_matrix[i][j];
 800082a:	4910      	ldr	r1, [pc, #64]	; (800086c <save_new_generation+0x54>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	019a      	lsls	r2, r3, #6
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	4413      	add	r3, r2
 8000834:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <save_new_generation+0x58>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	0199      	lsls	r1, r3, #6
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	440b      	add	r3, r1
 8000842:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for(int j = 0; j<COLS; j++)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2b3f      	cmp	r3, #63	; 0x3f
 8000850:	ddeb      	ble.n	800082a <save_new_generation+0x12>
    for(int i = 0; i< ROWS; i++)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b7f      	cmp	r3, #127	; 0x7f
 800085c:	dde2      	ble.n	8000824 <save_new_generation+0xc>
        }
    }
}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	200081cc 	.word	0x200081cc
 8000870:	200001cc 	.word	0x200001cc

08000874 <draw_picture>:

void draw_picture(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	 for(uint8_t i = 0; i < 128; i++)
 800087a:	2300      	movs	r3, #0
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	e021      	b.n	80008c4 <draw_picture+0x50>
	 {
		 for(uint8_t j = 0; j < 64; j++)
 8000880:	2300      	movs	r3, #0
 8000882:	71bb      	strb	r3, [r7, #6]
 8000884:	e018      	b.n	80008b8 <draw_picture+0x44>
		 {
			 if(cell_state_next_generation(i, j))
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	79ba      	ldrb	r2, [r7, #6]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff69 	bl	8000764 <cell_state_next_generation>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <draw_picture+0x32>
			 {
				 ssd1306_DrawPixel(i, j, White);
 8000898:	79b9      	ldrb	r1, [r7, #6]
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2201      	movs	r2, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fe7a 	bl	8001598 <ssd1306_DrawPixel>
 80008a4:	e005      	b.n	80008b2 <draw_picture+0x3e>
			 }
			 else
			 {
				 ssd1306_DrawPixel(i, j, Black);
 80008a6:	79b9      	ldrb	r1, [r7, #6]
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2200      	movs	r2, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fe73 	bl	8001598 <ssd1306_DrawPixel>
		 for(uint8_t j = 0; j < 64; j++)
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	3301      	adds	r3, #1
 80008b6:	71bb      	strb	r3, [r7, #6]
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b3f      	cmp	r3, #63	; 0x3f
 80008bc:	d9e3      	bls.n	8000886 <draw_picture+0x12>
	 for(uint8_t i = 0; i < 128; i++)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	3301      	adds	r3, #1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	dad9      	bge.n	8000880 <draw_picture+0xc>
			 }
		 }
	 }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 fee3 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f825 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 f981 	bl	8000be8 <MX_GPIO_Init>
  MX_ETH_Init();
 80008e6:	f000 f893 	bl	8000a10 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008ea:	f000 f91f 	bl	8000b2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008ee:	f000 f94d 	bl	8000b8c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80008f2:	f000 f8db 	bl	8000aac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80008f6:	f000 fd99 	bl	800142c <ssd1306_Init>
  ssd1306_Fill(White);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 fe00 	bl	8001500 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000900:	f000 fe22 	bl	8001548 <ssd1306_UpdateScreen>
  HAL_Delay(5000);
 8000904:	f241 3088 	movw	r0, #5000	; 0x1388
 8000908:	f000 ff2a 	bl	8001760 <HAL_Delay>
  create_matrix();
 800090c:	f7ff fe6a 	bl	80005e4 <create_matrix>
  set_matrix_population(6000);
 8000910:	f241 7070 	movw	r0, #6000	; 0x1770
 8000914:	f7ff fe8c 	bl	8000630 <set_matrix_population>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  draw_picture();
 8000918:	f7ff ffac 	bl	8000874 <draw_picture>
	  check_new_generation();
 800091c:	f7ff ff52 	bl	80007c4 <check_new_generation>
	  save_new_generation();
 8000920:	f7ff ff7a 	bl	8000818 <save_new_generation>
	  ssd1306_UpdateScreen();
 8000924:	f000 fe10 	bl	8001548 <ssd1306_UpdateScreen>
  {
 8000928:	e7f6      	b.n	8000918 <main+0x42>
	...

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2234      	movs	r2, #52	; 0x34
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fbb2 	bl	80050a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000950:	f002 fac6 	bl	8002ee0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <SystemClock_Config+0xdc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a2b      	ldr	r2, [pc, #172]	; (8000a08 <SystemClock_Config+0xdc>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <SystemClock_Config+0xdc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <SystemClock_Config+0xe0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000974:	4a25      	ldr	r2, [pc, #148]	; (8000a0c <SystemClock_Config+0xe0>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <SystemClock_Config+0xe0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800098c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000990:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800099c:	2304      	movs	r3, #4
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009a0:	2360      	movs	r3, #96	; 0x60
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 faf3 	bl	8002fa0 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c0:	f000 f9b4 	bl	8000d2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009c4:	f002 fa9c 	bl	8002f00 <HAL_PWREx_EnableOverDrive>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ce:	f000 f9ad 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	230f      	movs	r3, #15
 80009d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2302      	movs	r3, #2
 80009d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2103      	movs	r1, #3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fd84 	bl	80034fc <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009fa:	f000 f997 	bl	8000d2c <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3750      	adds	r7, #80	; 0x50
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a16:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a28:	22e1      	movs	r2, #225	; 0xe1
 8000a2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a40:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a4a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <MX_ETH_Init+0x90>)
 8000a50:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a54:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_ETH_Init+0x94>)
 8000a56:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a5a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a5e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a62:	f000 ff87 	bl	8001974 <HAL_ETH_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f000 f95e 	bl	8000d2c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a70:	2238      	movs	r2, #56	; 0x38
 8000a72:	2100      	movs	r1, #0
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_ETH_Init+0x98>)
 8000a76:	f004 fb15 	bl	80050a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_ETH_Init+0x98>)
 8000a7c:	2221      	movs	r2, #33	; 0x21
 8000a7e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_ETH_Init+0x98>)
 8000a82:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a86:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_ETH_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20010204 	.word	0x20010204
 8000a98:	40028000 	.word	0x40028000
 8000a9c:	20010898 	.word	0x20010898
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	20000070 	.word	0x20000070
 8000aa8:	200101cc 	.word	0x200101cc

08000aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_I2C1_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_I2C1_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ae8:	f001 fc30 	bl	800234c <HAL_I2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 f91b 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000afa:	f002 f811 	bl	8002b20 <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 f912 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000b0c:	f002 f853 	bl	8002bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f909 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200102b4 	.word	0x200102b4
 8000b24:	40005400 	.word	0x40005400
 8000b28:	20303e5d 	.word	0x20303e5d

08000b2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b32:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <MX_USART3_UART_Init+0x5c>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART3_UART_Init+0x58>)
 8000b70:	f003 fb12 	bl	8004198 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b7a:	f000 f8d7 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20010308 	.word	0x20010308
 8000b88:	40004800 	.word	0x40004800

08000b8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd0:	f002 f83d 	bl	8002c4e <HAL_PCD_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bda:	f000 f8a7 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20010390 	.word	0x20010390

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a46      	ldr	r2, [pc, #280]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c16:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a40      	ldr	r2, [pc, #256]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a3a      	ldr	r2, [pc, #232]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a34      	ldr	r2, [pc, #208]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c94:	4822      	ldr	r0, [pc, #136]	; (8000d20 <MX_GPIO_Init+0x138>)
 8000c96:	f001 fb3f 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	4821      	ldr	r0, [pc, #132]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000ca0:	f001 fb3a 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000caa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481b      	ldr	r0, [pc, #108]	; (8000d28 <MX_GPIO_Init+0x140>)
 8000cbc:	f001 f980 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cc0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_GPIO_Init+0x138>)
 8000cda:	f001 f971 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cde:	2340      	movs	r3, #64	; 0x40
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000cf6:	f001 f963 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_GPIO_Init+0x13c>)
 8000d0e:	f001 f957 	bl	8001fc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d12:	bf00      	nop
 8000d14:	3730      	adds	r7, #48	; 0x30
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400
 8000d24:	40021800 	.word	0x40021800
 8000d28:	40020800 	.word	0x40020800

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_MspInit+0x44>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x44>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x44>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a4e      	ldr	r2, [pc, #312]	; (8000ed8 <HAL_ETH_MspInit+0x158>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	f040 8096 	bne.w	8000ed0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000da4:	4b4d      	ldr	r3, [pc, #308]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a4c      	ldr	r2, [pc, #304]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db8:	623b      	str	r3, [r7, #32]
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	4b47      	ldr	r3, [pc, #284]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a46      	ldr	r2, [pc, #280]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b44      	ldr	r3, [pc, #272]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	4b41      	ldr	r3, [pc, #260]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a40      	ldr	r2, [pc, #256]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a3a      	ldr	r2, [pc, #232]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b38      	ldr	r3, [pc, #224]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b35      	ldr	r3, [pc, #212]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a34      	ldr	r2, [pc, #208]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a2e      	ldr	r2, [pc, #184]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_ETH_MspInit+0x15c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <HAL_ETH_MspInit+0x160>)
 8000e68:	f001 f8aa 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e6c:	2386      	movs	r3, #134	; 0x86
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7c:	230b      	movs	r3, #11
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <HAL_ETH_MspInit+0x164>)
 8000e88:	f001 f89a 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <HAL_ETH_MspInit+0x168>)
 8000eaa:	f001 f889 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000eae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <HAL_ETH_MspInit+0x16c>)
 8000ecc:	f001 f878 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40028000 	.word	0x40028000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40021800 	.word	0x40021800

08000ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ae      	sub	sp, #184	; 0xb8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2290      	movs	r2, #144	; 0x90
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 f8c7 	bl	80050a4 <memset>
  if(hi2c->Instance==I2C1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <HAL_I2C_MspInit+0xb4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d13c      	bne.n	8000f9a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fd0a 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f3a:	f7ff fef7 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_I2C_MspInit+0xb8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <HAL_I2C_MspInit+0xb8>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_I2C_MspInit+0xb8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5e:	2312      	movs	r3, #18
 8000f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f70:	2304      	movs	r3, #4
 8000f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <HAL_I2C_MspInit+0xbc>)
 8000f7e:	f001 f81f 	bl	8001fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_I2C_MspInit+0xb8>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_I2C_MspInit+0xb8>)
 8000f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_I2C_MspInit+0xb8>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	37b8      	adds	r7, #184	; 0xb8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40005400 	.word	0x40005400
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020400 	.word	0x40020400

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ae      	sub	sp, #184	; 0xb8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2290      	movs	r2, #144	; 0x90
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 f867 	bl	80050a4 <memset>
  if(huart->Instance==USART3)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <HAL_UART_MspInit+0xb4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d13c      	bne.n	800105a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fcaa 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ffa:	f7ff fe97 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_UART_MspInit+0xb8>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_UART_MspInit+0xb8>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_UART_MspInit+0xb8>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_UART_MspInit+0xb8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <HAL_UART_MspInit+0xb8>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_UART_MspInit+0xb8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800102e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001048:	2307      	movs	r3, #7
 800104a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_UART_MspInit+0xbc>)
 8001056:	f000 ffb3 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	37b8      	adds	r7, #184	; 0xb8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40004800 	.word	0x40004800
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00

08001070 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ae      	sub	sp, #184	; 0xb8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2290      	movs	r2, #144	; 0x90
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 f807 	bl	80050a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800109e:	d159      	bne.n	8001154 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fc49 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010bc:	f7ff fe36 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <HAL_PCD_MspInit+0xec>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4a25      	ldr	r2, [pc, #148]	; (800115c <HAL_PCD_MspInit+0xec>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <HAL_PCD_MspInit+0xec>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010d8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f2:	230a      	movs	r3, #10
 80010f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4818      	ldr	r0, [pc, #96]	; (8001160 <HAL_PCD_MspInit+0xf0>)
 8001100:	f000 ff5e 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800111c:	4619      	mov	r1, r3
 800111e:	4810      	ldr	r0, [pc, #64]	; (8001160 <HAL_PCD_MspInit+0xf0>)
 8001120:	f000 ff4e 	bl	8001fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_PCD_MspInit+0xec>)
 8001126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_PCD_MspInit+0xec>)
 800112a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112e:	6353      	str	r3, [r2, #52]	; 0x34
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_PCD_MspInit+0xec>)
 8001132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <HAL_PCD_MspInit+0xec>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_PCD_MspInit+0xec>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6453      	str	r3, [r2, #68]	; 0x44
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_PCD_MspInit+0xec>)
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	37b8      	adds	r7, #184	; 0xb8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 fab6 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return 1;
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_kill>:

int _kill(int pid, int sig)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011d2:	f003 ff3d 	bl	8005050 <__errno>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2216      	movs	r2, #22
 80011da:	601a      	str	r2, [r3, #0]
  return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_exit>:

void _exit (int status)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ffe7 	bl	80011c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011fa:	e7fe      	b.n	80011fa <_exit+0x12>

080011fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e00a      	b.n	8001224 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800120e:	f3af 8000 	nop.w
 8001212:	4601      	mov	r1, r0
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	b2ca      	uxtb	r2, r1
 800121c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf0      	blt.n	800120e <_read+0x12>
  }

  return len;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e009      	b.n	800125c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	60ba      	str	r2, [r7, #8]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf1      	blt.n	8001248 <_write+0x12>
  }
  return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_close>:

int _close(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001296:	605a      	str	r2, [r3, #4]
  return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_isatty>:

int _isatty(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f003 fea2 	bl	8005050 <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20080000 	.word	0x20080000
 8001338:	00000400 	.word	0x00000400
 800133c:	200108a0 	.word	0x200108a0
 8001340:	20010cc0 	.word	0x20010cc0

08001344 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136e:	490e      	ldr	r1, [pc, #56]	; (80013a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001384:	4c0b      	ldr	r4, [pc, #44]	; (80013b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001392:	f7ff ffd7 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f003 fe61 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139a:	f7ff fa9c 	bl	80008d6 <main>
  bx  lr    
 800139e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013ac:	08006370 	.word	0x08006370
  ldr r2, =_sbss
 80013b0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80013b4:	20010cc0 	.word	0x20010cc0

080013b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>

080013ba <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	2301      	movs	r3, #1
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	2200      	movs	r2, #0
 80013e4:	2178      	movs	r1, #120	; 0x78
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <ssd1306_WriteCommand+0x2c>)
 80013e8:	f001 f840 	bl	800246c <HAL_I2C_Mem_Write>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200102b4 	.word	0x200102b4

080013f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	f04f 32ff 	mov.w	r2, #4294967295
 800140a:	9202      	str	r2, [sp, #8]
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	2178      	movs	r1, #120	; 0x78
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <ssd1306_WriteData+0x30>)
 800141a:	f001 f827 	bl	800246c <HAL_I2C_Mem_Write>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200102b4 	.word	0x200102b4

0800142c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001430:	f7ff ffc3 	bl	80013ba <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001434:	2064      	movs	r0, #100	; 0x64
 8001436:	f000 f993 	bl	8001760 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f914 	bl	8001668 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001440:	2020      	movs	r0, #32
 8001442:	f7ff ffc1 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ffbe 	bl	80013c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800144c:	20b0      	movs	r0, #176	; 0xb0
 800144e:	f7ff ffbb 	bl	80013c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001452:	20c8      	movs	r0, #200	; 0xc8
 8001454:	f7ff ffb8 	bl	80013c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff ffb5 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800145e:	2010      	movs	r0, #16
 8001460:	f7ff ffb2 	bl	80013c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001464:	2040      	movs	r0, #64	; 0x40
 8001466:	f7ff ffaf 	bl	80013c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800146a:	20ff      	movs	r0, #255	; 0xff
 800146c:	f000 f8e8 	bl	8001640 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001470:	20a1      	movs	r0, #161	; 0xa1
 8001472:	f7ff ffa9 	bl	80013c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001476:	20a6      	movs	r0, #166	; 0xa6
 8001478:	f7ff ffa6 	bl	80013c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800147c:	20a8      	movs	r0, #168	; 0xa8
 800147e:	f7ff ffa3 	bl	80013c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001482:	203f      	movs	r0, #63	; 0x3f
 8001484:	f7ff ffa0 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001488:	20a4      	movs	r0, #164	; 0xa4
 800148a:	f7ff ff9d 	bl	80013c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800148e:	20d3      	movs	r0, #211	; 0xd3
 8001490:	f7ff ff9a 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ff97 	bl	80013c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800149a:	20d5      	movs	r0, #213	; 0xd5
 800149c:	f7ff ff94 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80014a0:	20f0      	movs	r0, #240	; 0xf0
 80014a2:	f7ff ff91 	bl	80013c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80014a6:	20d9      	movs	r0, #217	; 0xd9
 80014a8:	f7ff ff8e 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80014ac:	2022      	movs	r0, #34	; 0x22
 80014ae:	f7ff ff8b 	bl	80013c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80014b2:	20da      	movs	r0, #218	; 0xda
 80014b4:	f7ff ff88 	bl	80013c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80014b8:	2012      	movs	r0, #18
 80014ba:	f7ff ff85 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80014be:	20db      	movs	r0, #219	; 0xdb
 80014c0:	f7ff ff82 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80014c4:	2020      	movs	r0, #32
 80014c6:	f7ff ff7f 	bl	80013c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80014ca:	208d      	movs	r0, #141	; 0x8d
 80014cc:	f7ff ff7c 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80014d0:	2014      	movs	r0, #20
 80014d2:	f7ff ff79 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 f8c6 	bl	8001668 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f80f 	bl	8001500 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80014e2:	f000 f831 	bl	8001548 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <ssd1306_Init+0xd0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <ssd1306_Init+0xd0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80014f2:	4b02      	ldr	r3, [pc, #8]	; (80014fc <ssd1306_Init+0xd0>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	711a      	strb	r2, [r3, #4]
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20010ca4 	.word	0x20010ca4

08001500 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	e00d      	b.n	800152c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <ssd1306_Fill+0x1a>
 8001516:	2100      	movs	r1, #0
 8001518:	e000      	b.n	800151c <ssd1306_Fill+0x1c>
 800151a:	21ff      	movs	r1, #255	; 0xff
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <ssd1306_Fill+0x44>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	460a      	mov	r2, r1
 8001524:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001532:	d3ed      	bcc.n	8001510 <ssd1306_Fill+0x10>
    }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200108a4 	.word	0x200108a4

08001548 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e016      	b.n	8001582 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	3b50      	subs	r3, #80	; 0x50
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff34 	bl	80013c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ff31 	bl	80013c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001566:	2010      	movs	r0, #16
 8001568:	f7ff ff2e 	bl	80013c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	01db      	lsls	r3, r3, #7
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <ssd1306_UpdateScreen+0x4c>)
 8001572:	4413      	add	r3, r2
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff3e 	bl	80013f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	3301      	adds	r3, #1
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b07      	cmp	r3, #7
 8001586:	d9e5      	bls.n	8001554 <ssd1306_UpdateScreen+0xc>
    }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200108a4 	.word	0x200108a4

08001598 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	460b      	mov	r3, r1
 80015a4:	71bb      	strb	r3, [r7, #6]
 80015a6:	4613      	mov	r3, r2
 80015a8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db3d      	blt.n	800162e <ssd1306_DrawPixel+0x96>
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	2b3f      	cmp	r3, #63	; 0x3f
 80015b6:	d83a      	bhi.n	800162e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d11a      	bne.n	80015f4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	01db      	lsls	r3, r3, #7
 80015ca:	4413      	add	r3, r2
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <ssd1306_DrawPixel+0xa4>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b259      	sxtb	r1, r3
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	4603      	mov	r3, r0
 80015e8:	01db      	lsls	r3, r3, #7
 80015ea:	4413      	add	r3, r2
 80015ec:	b2c9      	uxtb	r1, r1
 80015ee:	4a13      	ldr	r2, [pc, #76]	; (800163c <ssd1306_DrawPixel+0xa4>)
 80015f0:	54d1      	strb	r1, [r2, r3]
 80015f2:	e01d      	b.n	8001630 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	79bb      	ldrb	r3, [r7, #6]
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	01db      	lsls	r3, r3, #7
 8001600:	4413      	add	r3, r2
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <ssd1306_DrawPixel+0xa4>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	b25a      	sxtb	r2, r3
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	2101      	movs	r1, #1
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	b25b      	sxtb	r3, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	b25b      	sxtb	r3, r3
 800161a:	4013      	ands	r3, r2
 800161c:	b259      	sxtb	r1, r3
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	4603      	mov	r3, r0
 8001622:	01db      	lsls	r3, r3, #7
 8001624:	4413      	add	r3, r2
 8001626:	b2c9      	uxtb	r1, r1
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <ssd1306_DrawPixel+0xa4>)
 800162a:	54d1      	strb	r1, [r2, r3]
 800162c:	e000      	b.n	8001630 <ssd1306_DrawPixel+0x98>
        return;
 800162e:	bf00      	nop
    }
}
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200108a4 	.word	0x200108a4

08001640 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800164a:	2381      	movs	r3, #129	; 0x81
 800164c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff feb9 	bl	80013c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff feb5 	bl	80013c8 <ssd1306_WriteCommand>
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001678:	23af      	movs	r3, #175	; 0xaf
 800167a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <ssd1306_SetDisplayOn+0x38>)
 800167e:	2201      	movs	r2, #1
 8001680:	715a      	strb	r2, [r3, #5]
 8001682:	e004      	b.n	800168e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001684:	23ae      	movs	r3, #174	; 0xae
 8001686:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <ssd1306_SetDisplayOn+0x38>)
 800168a:	2200      	movs	r2, #0
 800168c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe99 	bl	80013c8 <ssd1306_WriteCommand>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20010ca4 	.word	0x20010ca4

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f92f 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 f806 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fb40 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f93b 	bl	800195a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f911 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000000 	.word	0x20000000
 8001718:	20000008 	.word	0x20000008
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	20010cac 	.word	0x20010cac

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20010cac 	.word	0x20010cac

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	05fa0000 	.word	0x05fa0000

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff47 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff5c 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff8e 	bl	8001860 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5d 	bl	800180c <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffb0 	bl	80018c8 <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e06a      	b.n	8001a5c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2223      	movs	r2, #35	; 0x23
 8001994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff f9f1 	bl	8000d80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_ETH_Init+0xf0>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <HAL_ETH_Init+0xf0>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_ETH_Init+0xf0>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a2b      	ldr	r2, [pc, #172]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4927      	ldr	r1, [pc, #156]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ec:	f7ff feac 	bl	8001748 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019f2:	e011      	b.n	8001a18 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019f4:	f7ff fea8 	bl	8001748 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a02:	d909      	bls.n	8001a18 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2204      	movs	r2, #4
 8001a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	22e0      	movs	r2, #224	; 0xe0
 8001a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e021      	b.n	8001a5c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1e4      	bne.n	80019f4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f958 	bl	8001ce0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f9ff 	bl	8001e34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fa55 	bl	8001ee6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	461a      	mov	r2, r3
 8001a42:	2100      	movs	r1, #0
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f9bd 	bl	8001dc4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2210      	movs	r2, #16
 8001a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800

08001a6c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <ETH_SetMACConfig+0x15c>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7c1b      	ldrb	r3, [r3, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <ETH_SetMACConfig+0x28>
 8001a8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a92:	e000      	b.n	8001a96 <ETH_SetMACConfig+0x2a>
 8001a94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	7c5b      	ldrb	r3, [r3, #17]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <ETH_SetMACConfig+0x38>
 8001a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa2:	e000      	b.n	8001aa6 <ETH_SetMACConfig+0x3a>
 8001aa4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aa6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	7fdb      	ldrb	r3, [r3, #31]
 8001ab2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ab4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	7f92      	ldrb	r2, [r2, #30]
 8001ac0:	2a00      	cmp	r2, #0
 8001ac2:	d102      	bne.n	8001aca <ETH_SetMACConfig+0x5e>
 8001ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac8:	e000      	b.n	8001acc <ETH_SetMACConfig+0x60>
 8001aca:	2200      	movs	r2, #0
                        macconf->Speed |
 8001acc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7f1b      	ldrb	r3, [r3, #28]
 8001ad2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ad4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ada:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ae2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d102      	bne.n	8001af4 <ETH_SetMACConfig+0x88>
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	e000      	b.n	8001af6 <ETH_SetMACConfig+0x8a>
 8001af4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001af6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7bdb      	ldrb	r3, [r3, #15]
 8001afc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001afe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b0c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff fe1a 	bl	8001760 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d101      	bne.n	8001b5a <ETH_SetMACConfig+0xee>
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	e000      	b.n	8001b5c <ETH_SetMACConfig+0xf0>
 8001b5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b5c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	d101      	bne.n	8001b72 <ETH_SetMACConfig+0x106>
 8001b6e:	2208      	movs	r2, #8
 8001b70:	e000      	b.n	8001b74 <ETH_SetMACConfig+0x108>
 8001b72:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b7c:	2a01      	cmp	r2, #1
 8001b7e:	d101      	bne.n	8001b84 <ETH_SetMACConfig+0x118>
 8001b80:	2204      	movs	r2, #4
 8001b82:	e000      	b.n	8001b86 <ETH_SetMACConfig+0x11a>
 8001b84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001b8e:	2a01      	cmp	r2, #1
 8001b90:	d101      	bne.n	8001b96 <ETH_SetMACConfig+0x12a>
 8001b92:	2202      	movs	r2, #2
 8001b94:	e000      	b.n	8001b98 <ETH_SetMACConfig+0x12c>
 8001b96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fdd5 	bl	8001760 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	ff20810f 	.word	0xff20810f

08001bcc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <ETH_SetDMAConfig+0x110>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	7b1b      	ldrb	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <ETH_SetDMAConfig+0x2c>
 8001bf2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bf6:	e000      	b.n	8001bfa <ETH_SetDMAConfig+0x2e>
 8001bf8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	7b5b      	ldrb	r3, [r3, #13]
 8001bfe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	7f52      	ldrb	r2, [r2, #29]
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d102      	bne.n	8001c10 <ETH_SetDMAConfig+0x44>
 8001c0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c0e:	e000      	b.n	8001c12 <ETH_SetDMAConfig+0x46>
 8001c10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7b9b      	ldrb	r3, [r3, #14]
 8001c18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	7f1b      	ldrb	r3, [r3, #28]
 8001c26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	7f9b      	ldrb	r3, [r3, #30]
 8001c2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c40:	4313      	orrs	r3, r2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff fd7c 	bl	8001760 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c70:	461a      	mov	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ca4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cb2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fd4d 	bl	8001760 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f8de3f23 	.word	0xf8de3f23

08001ce0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0a6      	sub	sp, #152	; 0x98
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d46:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fe86 	bl	8001a6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d94:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff08 	bl	8001bcc <ETH_SetDMAConfig>
}
 8001dbc:	bf00      	nop
 8001dbe:	3798      	adds	r7, #152	; 0x98
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3305      	adds	r3, #5
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	3204      	adds	r2, #4
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <ETH_MACAddressConfig+0x68>)
 8001de6:	4413      	add	r3, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3303      	adds	r3, #3
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	061a      	lsls	r2, r3, #24
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3302      	adds	r3, #2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3301      	adds	r3, #1
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <ETH_MACAddressConfig+0x6c>)
 8001e16:	4413      	add	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	6013      	str	r3, [r2, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40028040 	.word	0x40028040
 8001e30:	40028044 	.word	0x40028044

08001e34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e03e      	b.n	8001ec0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	3206      	adds	r2, #6
 8001e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d80c      	bhi.n	8001ea4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	e004      	b.n	8001eae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d9bd      	bls.n	8001e42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed8:	611a      	str	r2, [r3, #16]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e046      	b.n	8001f82 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6919      	ldr	r1, [r3, #16]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	3212      	adds	r2, #18
 8001f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d80c      	bhi.n	8001f72 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	e004      	b.n	8001f7c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d9b5      	bls.n	8001ef4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb2:	60da      	str	r2, [r3, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e175      	b.n	80022cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8164 	bne.w	80022c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d005      	beq.n	8002016 <HAL_GPIO_Init+0x56>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d130      	bne.n	8002078 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 0201 	and.w	r2, r3, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b03      	cmp	r3, #3
 8002082:	d017      	beq.n	80020b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d123      	bne.n	8002108 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80be 	beq.w	80022c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <HAL_GPIO_Init+0x324>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <HAL_GPIO_Init+0x324>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <HAL_GPIO_Init+0x324>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002162:	4a61      	ldr	r2, [pc, #388]	; (80022e8 <HAL_GPIO_Init+0x328>)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_GPIO_Init+0x32c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d037      	beq.n	80021fe <HAL_GPIO_Init+0x23e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_GPIO_Init+0x330>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d031      	beq.n	80021fa <HAL_GPIO_Init+0x23a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_GPIO_Init+0x334>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02b      	beq.n	80021f6 <HAL_GPIO_Init+0x236>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_GPIO_Init+0x338>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d025      	beq.n	80021f2 <HAL_GPIO_Init+0x232>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_GPIO_Init+0x33c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <HAL_GPIO_Init+0x22e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a53      	ldr	r2, [pc, #332]	; (8002300 <HAL_GPIO_Init+0x340>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x22a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_GPIO_Init+0x344>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x226>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a51      	ldr	r2, [pc, #324]	; (8002308 <HAL_GPIO_Init+0x348>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x222>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a50      	ldr	r2, [pc, #320]	; (800230c <HAL_GPIO_Init+0x34c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x21e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4f      	ldr	r2, [pc, #316]	; (8002310 <HAL_GPIO_Init+0x350>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x21a>
 80021d6:	2309      	movs	r3, #9
 80021d8:	e012      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021da:	230a      	movs	r3, #10
 80021dc:	e010      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021de:	2308      	movs	r3, #8
 80021e0:	e00e      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021e6:	2306      	movs	r3, #6
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002210:	4935      	ldr	r1, [pc, #212]	; (80022e8 <HAL_GPIO_Init+0x328>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002242:	4a34      	ldr	r2, [pc, #208]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002248:	4b32      	ldr	r3, [pc, #200]	; (8002314 <HAL_GPIO_Init+0x354>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <HAL_GPIO_Init+0x354>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_GPIO_Init+0x354>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_GPIO_Init+0x354>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae86 	bls.w	8001fe0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40021c00 	.word	0x40021c00
 800230c:	40022000 	.word	0x40022000
 8002310:	40022400 	.word	0x40022400
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002334:	e003      	b.n	800233e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fdbc 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800239c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	e006      	b.n	80023d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d104      	bne.n	80023e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_I2C_Init+0x11c>)
 80023f2:	430b      	orrs	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	02008000 	.word	0x02008000

0800246c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	4608      	mov	r0, r1
 8002476:	4611      	mov	r1, r2
 8002478:	461a      	mov	r2, r3
 800247a:	4603      	mov	r3, r0
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	460b      	mov	r3, r1
 8002480:	813b      	strh	r3, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b20      	cmp	r3, #32
 8002490:	f040 80f9 	bne.w	8002686 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_I2C_Mem_Write+0x34>
 800249a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0ed      	b.n	8002688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Mem_Write+0x4e>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e0e6      	b.n	8002688 <HAL_I2C_Mem_Write+0x21c>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024c2:	f7ff f941 	bl	8001748 <HAL_GetTick>
 80024c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2319      	movs	r3, #25
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f955 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0d1      	b.n	8002688 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2221      	movs	r2, #33	; 0x21
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a3a      	ldr	r2, [r7, #32]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800250c:	88f8      	ldrh	r0, [r7, #6]
 800250e:	893a      	ldrh	r2, [r7, #8]
 8002510:	8979      	ldrh	r1, [r7, #10]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	4603      	mov	r3, r0
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f8b9 	bl	8002694 <I2C_RequestMemoryWrite>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0a9      	b.n	8002688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2bff      	cmp	r3, #255	; 0xff
 800253c:	d90e      	bls.n	800255c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	22ff      	movs	r2, #255	; 0xff
 8002542:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	b2da      	uxtb	r2, r3
 800254a:	8979      	ldrh	r1, [r7, #10]
 800254c:	2300      	movs	r3, #0
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fab1 	bl	8002abc <I2C_TransferConfig>
 800255a:	e00f      	b.n	800257c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	b2da      	uxtb	r2, r3
 800256c:	8979      	ldrh	r1, [r7, #10]
 800256e:	2300      	movs	r3, #0
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 faa0 	bl	8002abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f93f 	bl	8002804 <I2C_WaitOnTXISFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e07b      	b.n	8002688 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d034      	beq.n	8002634 <HAL_I2C_Mem_Write+0x1c8>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d130      	bne.n	8002634 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	2200      	movs	r2, #0
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f8d1 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e04d      	b.n	8002688 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	d90e      	bls.n	8002614 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	b2da      	uxtb	r2, r3
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	2300      	movs	r3, #0
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fa55 	bl	8002abc <I2C_TransferConfig>
 8002612:	e00f      	b.n	8002634 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	b2da      	uxtb	r2, r3
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	2300      	movs	r3, #0
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fa44 	bl	8002abc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d19e      	bne.n	800257c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f91e 	bl	8002884 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e01a      	b.n	8002688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2220      	movs	r2, #32
 8002658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_I2C_Mem_Write+0x224>)
 8002666:	400b      	ands	r3, r1
 8002668:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	fe00e800 	.word	0xfe00e800

08002694 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	817b      	strh	r3, [r7, #10]
 80026a6:	460b      	mov	r3, r1
 80026a8:	813b      	strh	r3, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	8979      	ldrh	r1, [r7, #10]
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <I2C_RequestMemoryWrite+0xa4>)
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f9fd 	bl	8002abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	69b9      	ldr	r1, [r7, #24]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f89c 	bl	8002804 <I2C_WaitOnTXISFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e02c      	b.n	8002730 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026dc:	893b      	ldrh	r3, [r7, #8]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
 80026e6:	e015      	b.n	8002714 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026e8:	893b      	ldrh	r3, [r7, #8]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	69b9      	ldr	r1, [r7, #24]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f882 	bl	8002804 <I2C_WaitOnTXISFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e012      	b.n	8002730 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800270a:	893b      	ldrh	r3, [r7, #8]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2200      	movs	r2, #0
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f830 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	80002000 	.word	0x80002000

0800273c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b02      	cmp	r3, #2
 8002750:	d103      	bne.n	800275a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d007      	beq.n	8002778 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	619a      	str	r2, [r3, #24]
  }
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002794:	e022      	b.n	80027dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d01e      	beq.n	80027dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7fe ffd3 	bl	8001748 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d113      	bne.n	80027dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e00f      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4013      	ands	r3, r2
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d0cd      	beq.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002810:	e02c      	b.n	800286c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f870 	bl	80028fc <I2C_IsErrorOccurred>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e02a      	b.n	800287c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d01e      	beq.n	800286c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282e:	f7fe ff8b 	bl	8001748 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d113      	bne.n	800286c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e007      	b.n	800287c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d1cb      	bne.n	8002812 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002890:	e028      	b.n	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f830 	bl	80028fc <I2C_IsErrorOccurred>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e026      	b.n	80028f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a6:	f7fe ff4f 	bl	8001748 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d302      	bcc.n	80028bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d113      	bne.n	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d1cf      	bne.n	8002892 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d068      	beq.n	80029fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2210      	movs	r2, #16
 800292e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002930:	e049      	b.n	80029c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d045      	beq.n	80029c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7fe ff05 	bl	8001748 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_IsErrorOccurred+0x54>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d13a      	bne.n	80029c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002962:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002972:	d121      	bne.n	80029b8 <I2C_IsErrorOccurred+0xbc>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800297a:	d01d      	beq.n	80029b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	2b20      	cmp	r3, #32
 8002980:	d01a      	beq.n	80029b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002990:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002992:	f7fe fed9 	bl	8001748 <HAL_GetTick>
 8002996:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002998:	e00e      	b.n	80029b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800299a:	f7fe fed5 	bl	8001748 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b19      	cmp	r3, #25
 80029a6:	d907      	bls.n	80029b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	f043 0320 	orr.w	r3, r3, #32
 80029ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80029b6:	e006      	b.n	80029c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d1e9      	bne.n	800299a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d003      	beq.n	80029dc <I2C_IsErrorOccurred+0xe0>
 80029d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0aa      	beq.n	8002932 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d103      	bne.n	80029ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2220      	movs	r2, #32
 80029ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f043 0308 	orr.w	r3, r3, #8
 8002a34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01c      	beq.n	8002aaa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff fe63 	bl	800273c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <I2C_IsErrorOccurred+0x1bc>)
 8002a82:	400b      	ands	r3, r1
 8002a84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3728      	adds	r7, #40	; 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	fe00e800 	.word	0xfe00e800

08002abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	817b      	strh	r3, [r7, #10]
 8002aca:	4613      	mov	r3, r2
 8002acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ad4:	7a7b      	ldrb	r3, [r7, #9]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002adc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	0d5b      	lsrs	r3, r3, #21
 8002af6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <I2C_TransferConfig+0x60>)
 8002afc:	430b      	orrs	r3, r1
 8002afe:	43db      	mvns	r3, r3
 8002b00:	ea02 0103 	and.w	r1, r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	03ff63ff 	.word	0x03ff63ff

08002b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d138      	bne.n	8002ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e032      	b.n	8002baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d139      	bne.n	8002c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e033      	b.n	8002c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c50:	b08f      	sub	sp, #60	; 0x3c
 8002c52:	af0a      	add	r7, sp, #40	; 0x28
 8002c54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e116      	b.n	8002e8e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe f9f8 	bl	8001070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2203      	movs	r2, #3
 8002c84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 ff3a 	bl	8004b18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	687e      	ldr	r6, [r7, #4]
 8002cac:	466d      	mov	r5, sp
 8002cae:	f106 0410 	add.w	r4, r6, #16
 8002cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cc2:	1d33      	adds	r3, r6, #4
 8002cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f001 fece 	bl	8004a68 <USB_CoreInit>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0d7      	b.n	8002e8e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 ff28 	bl	8004b3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e04a      	b.n	8002d86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	333d      	adds	r3, #61	; 0x3d
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	333c      	adds	r3, #60	; 0x3c
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	b298      	uxth	r0, r3
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	3344      	adds	r3, #68	; 0x44
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3340      	adds	r3, #64	; 0x40
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	3348      	adds	r3, #72	; 0x48
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334c      	adds	r3, #76	; 0x4c
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3354      	adds	r3, #84	; 0x54
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	3301      	adds	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d3af      	bcc.n	8002cf0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e044      	b.n	8002e20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3b5      	bcc.n	8002d96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	687e      	ldr	r6, [r7, #4]
 8002e32:	466d      	mov	r5, sp
 8002e34:	f106 0410 	add.w	r4, r6, #16
 8002e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e48:	1d33      	adds	r3, r6, #4
 8002e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4c:	6838      	ldr	r0, [r7, #0]
 8002e4e:	f001 fec1 	bl	8004bd4 <USB_DevInit>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e014      	b.n	8002e8e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d102      	bne.n	8002e82 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f80b 	bl	8002e98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 f87f 	bl	8004f8a <USB_DevDisconnect>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_PCDEx_ActivateLPM+0x44>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	10000003 	.word	0x10000003

08002ee0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a04      	ldr	r2, [pc, #16]	; (8002efc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40007000 	.word	0x40007000

08002f00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f22:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f2e:	f7fe fc0b 	bl	8001748 <HAL_GetTick>
 8002f32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f34:	e009      	b.n	8002f4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f36:	f7fe fc07 	bl	8001748 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f44:	d901      	bls.n	8002f4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e022      	b.n	8002f90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d1ee      	bne.n	8002f36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f64:	f7fe fbf0 	bl	8001748 <HAL_GetTick>
 8002f68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f6a:	e009      	b.n	8002f80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f6c:	f7fe fbec 	bl	8001748 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f7a:	d901      	bls.n	8002f80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e007      	b.n	8002f90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f8c:	d1ee      	bne.n	8002f6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40007000 	.word	0x40007000

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e29b      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8087 	beq.w	80030d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc4:	4b96      	ldr	r3, [pc, #600]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d00c      	beq.n	8002fea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd0:	4b93      	ldr	r3, [pc, #588]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d112      	bne.n	8003002 <HAL_RCC_OscConfig+0x62>
 8002fdc:	4b90      	ldr	r3, [pc, #576]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe8:	d10b      	bne.n	8003002 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fea:	4b8d      	ldr	r3, [pc, #564]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d06c      	beq.n	80030d0 <HAL_RCC_OscConfig+0x130>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d168      	bne.n	80030d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e275      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x7a>
 800300c:	4b84      	ldr	r3, [pc, #528]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a83      	ldr	r2, [pc, #524]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e02e      	b.n	8003078 <HAL_RCC_OscConfig+0xd8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x9c>
 8003022:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7e      	ldr	r2, [pc, #504]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b7c      	ldr	r3, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a7b      	ldr	r2, [pc, #492]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e01d      	b.n	8003078 <HAL_RCC_OscConfig+0xd8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0xc0>
 8003046:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a75      	ldr	r2, [pc, #468]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a72      	ldr	r2, [pc, #456]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xd8>
 8003060:	4b6f      	ldr	r3, [pc, #444]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6e      	ldr	r2, [pc, #440]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a6b      	ldr	r2, [pc, #428]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fb62 	bl	8001748 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003088:	f7fe fb5e 	bl	8001748 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e229      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b61      	ldr	r3, [pc, #388]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0xe8>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fb4e 	bl	8001748 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fe fb4a 	bl	8001748 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e215      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	4b57      	ldr	r3, [pc, #348]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x110>
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d069      	beq.n	80031b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030de:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b4d      	ldr	r3, [pc, #308]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11c      	bne.n	8003130 <HAL_RCC_OscConfig+0x190>
 80030f6:	4b4a      	ldr	r3, [pc, #296]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x17a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1e9      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	493d      	ldr	r1, [pc, #244]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	e040      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d023      	beq.n	8003180 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a38      	ldr	r2, [pc, #224]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fb00 	bl	8001748 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe fafc 	bl	8001748 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	4b30      	ldr	r3, [pc, #192]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4929      	ldr	r1, [pc, #164]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
 800317e:	e018      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a26      	ldr	r2, [pc, #152]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe fadc 	bl	8001748 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe fad8 	bl	8001748 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1a3      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d038      	beq.n	8003230 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d019      	beq.n	80031fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80031c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ca:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7fe fab9 	bl	8001748 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031da:	f7fe fab5 	bl	8001748 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e180      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80031ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x23a>
 80031f8:	e01a      	b.n	8003230 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 80031fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_RCC_OscConfig+0x280>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fe fa9f 	bl	8001748 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320e:	f7fe fa9b 	bl	8001748 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d903      	bls.n	8003224 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e166      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
 8003220:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b92      	ldr	r3, [pc, #584]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ee      	bne.n	800320e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a4 	beq.w	8003386 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	4b89      	ldr	r3, [pc, #548]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a88      	ldr	r2, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b86      	ldr	r3, [pc, #536]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	4b83      	ldr	r3, [pc, #524]	; (8003474 <HAL_RCC_OscConfig+0x4d4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003272:	4b80      	ldr	r3, [pc, #512]	; (8003474 <HAL_RCC_OscConfig+0x4d4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a7f      	ldr	r2, [pc, #508]	; (8003474 <HAL_RCC_OscConfig+0x4d4>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7fe fa63 	bl	8001748 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fe fa5f 	bl	8001748 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b64      	cmp	r3, #100	; 0x64
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e12a      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003298:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x4d4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x31a>
 80032ac:	4b70      	ldr	r3, [pc, #448]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a6f      	ldr	r2, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	e02d      	b.n	8003316 <HAL_RCC_OscConfig+0x376>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x33c>
 80032c2:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a6a      	ldr	r2, [pc, #424]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a67      	ldr	r2, [pc, #412]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
 80032da:	e01c      	b.n	8003316 <HAL_RCC_OscConfig+0x376>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d10c      	bne.n	80032fe <HAL_RCC_OscConfig+0x35e>
 80032e4:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a61      	ldr	r2, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a5e      	ldr	r2, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
 80032fc:	e00b      	b.n	8003316 <HAL_RCC_OscConfig+0x376>
 80032fe:	4b5c      	ldr	r3, [pc, #368]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a5b      	ldr	r2, [pc, #364]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	4b59      	ldr	r3, [pc, #356]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a58      	ldr	r2, [pc, #352]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003310:	f023 0304 	bic.w	r3, r3, #4
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d015      	beq.n	800334a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331e:	f7fe fa13 	bl	8001748 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fe fa0f 	bl	8001748 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e0d8      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ee      	beq.n	8003326 <HAL_RCC_OscConfig+0x386>
 8003348:	e014      	b.n	8003374 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe f9fd 	bl	8001748 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fe f9f9 	bl	8001748 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0c2      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003368:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ee      	bne.n	8003352 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d105      	bne.n	8003386 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a3c      	ldr	r2, [pc, #240]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80ae 	beq.w	80034ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003390:	4b37      	ldr	r3, [pc, #220]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d06d      	beq.n	8003478 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d14b      	bne.n	800343c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a31      	ldr	r2, [pc, #196]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80033aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe f9ca 	bl	8001748 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe f9c6 	bl	8001748 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e091      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	071b      	lsls	r3, r3, #28
 8003402:	491b      	ldr	r1, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 800340e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe f998 	bl	8001748 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe f994 	bl	8001748 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e05f      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x47c>
 800343a:	e057      	b.n	80034ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe f97e 	bl	8001748 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe f97a 	bl	8001748 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e045      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x4b0>
 800346e:	e03d      	b.n	80034ec <HAL_RCC_OscConfig+0x54c>
 8003470:	40023800 	.word	0x40023800
 8003474:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <HAL_RCC_OscConfig+0x558>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d030      	beq.n	80034e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d129      	bne.n	80034e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d122      	bne.n	80034e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d119      	bne.n	80034e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	3b01      	subs	r3, #1
 80034c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d10f      	bne.n	80034e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d0      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d910      	bls.n	8003544 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 020f 	bic.w	r2, r3, #15
 800352a:	4965      	ldr	r1, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d040      	beq.n	8003620 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e073      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4936      	ldr	r1, [pc, #216]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f0:	f7fe f8aa 	bl	8001748 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fe f8a6 	bl	8001748 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e053      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d210      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 020f 	bic.w	r2, r3, #15
 8003636:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1cc>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1d0>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1d4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe f806 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08006200 	.word	0x08006200
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d8:	b094      	sub	sp, #80	; 0x50
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	647b      	str	r3, [r7, #68]	; 0x44
 80036e0:	2300      	movs	r3, #0
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e4:	2300      	movs	r3, #0
 80036e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	4b79      	ldr	r3, [pc, #484]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 80e1 	bhi.w	80038c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 8003706:	e0db      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800370c:	e0db      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b73      	ldr	r3, [pc, #460]	; (80038dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003712:	e0d8      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800371e:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	2200      	movs	r2, #0
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
 8003734:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
 8003742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003746:	4622      	mov	r2, r4
 8003748:	462b      	mov	r3, r5
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	0159      	lsls	r1, r3, #5
 8003754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003758:	0150      	lsls	r0, r2, #5
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4621      	mov	r1, r4
 8003760:	1a51      	subs	r1, r2, r1
 8003762:	6139      	str	r1, [r7, #16]
 8003764:	4629      	mov	r1, r5
 8003766:	eb63 0301 	sbc.w	r3, r3, r1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003778:	4659      	mov	r1, fp
 800377a:	018b      	lsls	r3, r1, #6
 800377c:	4651      	mov	r1, sl
 800377e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003782:	4651      	mov	r1, sl
 8003784:	018a      	lsls	r2, r1, #6
 8003786:	4651      	mov	r1, sl
 8003788:	ebb2 0801 	subs.w	r8, r2, r1
 800378c:	4659      	mov	r1, fp
 800378e:	eb63 0901 	sbc.w	r9, r3, r1
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a6:	4690      	mov	r8, r2
 80037a8:	4699      	mov	r9, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	eb18 0303 	adds.w	r3, r8, r3
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	462b      	mov	r3, r5
 80037b4:	eb49 0303 	adc.w	r3, r9, r3
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037c6:	4629      	mov	r1, r5
 80037c8:	024b      	lsls	r3, r1, #9
 80037ca:	4621      	mov	r1, r4
 80037cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d0:	4621      	mov	r1, r4
 80037d2:	024a      	lsls	r2, r1, #9
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037da:	2200      	movs	r2, #0
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037e4:	f7fc fd7c 	bl	80002e0 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4613      	mov	r3, r2
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f0:	e058      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	4611      	mov	r1, r2
 80037fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	f04f 0000 	mov.w	r0, #0
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	0159      	lsls	r1, r3, #5
 800381a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381e:	0150      	lsls	r0, r2, #5
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4641      	mov	r1, r8
 8003826:	ebb2 0a01 	subs.w	sl, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800383c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003844:	ebb2 040a 	subs.w	r4, r2, sl
 8003848:	eb63 050b 	sbc.w	r5, r3, fp
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	00eb      	lsls	r3, r5, #3
 8003856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	4614      	mov	r4, r2
 800385e:	461d      	mov	r5, r3
 8003860:	4643      	mov	r3, r8
 8003862:	18e3      	adds	r3, r4, r3
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	464b      	mov	r3, r9
 8003868:	eb45 0303 	adc.w	r3, r5, r3
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387a:	4629      	mov	r1, r5
 800387c:	028b      	lsls	r3, r1, #10
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003884:	4621      	mov	r1, r4
 8003886:	028a      	lsls	r2, r1, #10
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388e:	2200      	movs	r2, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	61fa      	str	r2, [r7, #28]
 8003894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003898:	f7fc fd22 	bl	80002e0 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80038b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3750      	adds	r7, #80	; 0x50
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	007a1200 	.word	0x007a1200

080038e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038fc:	f7ff fff0 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	08006210 	.word	0x08006210

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003924:	f7ff ffdc 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0b5b      	lsrs	r3, r3, #13
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	08006210 	.word	0x08006210

08003948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d012      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003970:	4b69      	ldr	r3, [pc, #420]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a68      	ldr	r2, [pc, #416]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800397a:	6093      	str	r3, [r2, #8]
 800397c:	4b66      	ldr	r3, [pc, #408]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	4964      	ldr	r1, [pc, #400]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d017      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a2:	4b5d      	ldr	r3, [pc, #372]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	4959      	ldr	r1, [pc, #356]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c0:	d101      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d017      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039de:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	494a      	ldr	r1, [pc, #296]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fc:	d101      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 808b 	beq.w	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	4a39      	ldr	r2, [pc, #228]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6413      	str	r3, [r2, #64]	; 0x40
 8003a38:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a44:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a34      	ldr	r2, [pc, #208]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fd fe7a 	bl	8001748 <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fd fe76 	bl	8001748 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e38f      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a76:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d035      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d02e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a94:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a1d      	ldr	r2, [pc, #116]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003abc:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d114      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fe3e 	bl	8001748 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fe3a 	bl	8001748 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e351      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ee      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afe:	d111      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b0e:	400b      	ands	r3, r1
 8003b10:	4901      	ldr	r1, [pc, #4]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
 8003b16:	e00b      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	0ffffcff 	.word	0x0ffffcff
 8003b24:	4bac      	ldr	r3, [pc, #688]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4aab      	ldr	r2, [pc, #684]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b2e:	6093      	str	r3, [r2, #8]
 8003b30:	4ba9      	ldr	r3, [pc, #676]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3c:	49a6      	ldr	r1, [pc, #664]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b4e:	4ba2      	ldr	r3, [pc, #648]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b54:	4aa0      	ldr	r2, [pc, #640]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b5e:	4b9e      	ldr	r3, [pc, #632]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	499b      	ldr	r1, [pc, #620]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b7c:	4b96      	ldr	r3, [pc, #600]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8a:	4993      	ldr	r1, [pc, #588]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b9e:	4b8e      	ldr	r3, [pc, #568]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bac:	498a      	ldr	r1, [pc, #552]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bc0:	4b85      	ldr	r3, [pc, #532]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bce:	4982      	ldr	r1, [pc, #520]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4979      	ldr	r1, [pc, #484]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c04:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	4971      	ldr	r1, [pc, #452]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c26:	4b6c      	ldr	r3, [pc, #432]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f023 020c 	bic.w	r2, r3, #12
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c34:	4968      	ldr	r1, [pc, #416]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c48:	4b63      	ldr	r3, [pc, #396]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4960      	ldr	r1, [pc, #384]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c6a:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	4957      	ldr	r1, [pc, #348]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c8c:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	494f      	ldr	r1, [pc, #316]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003cae:	4b4a      	ldr	r3, [pc, #296]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	4946      	ldr	r1, [pc, #280]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cd0:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	493e      	ldr	r1, [pc, #248]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d00:	4935      	ldr	r1, [pc, #212]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d14:	4b30      	ldr	r3, [pc, #192]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d22:	492d      	ldr	r1, [pc, #180]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d44:	4924      	ldr	r1, [pc, #144]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d54:	d101      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d84:	4914      	ldr	r1, [pc, #80]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da8:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00f      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dcc:	4902      	ldr	r1, [pc, #8]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00b      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003de8:	4b8a      	ldr	r3, [pc, #552]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	4986      	ldr	r1, [pc, #536]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e0c:	4b81      	ldr	r3, [pc, #516]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1c:	497d      	ldr	r1, [pc, #500]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d006      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80d6 	beq.w	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e38:	4b76      	ldr	r3, [pc, #472]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a75      	ldr	r2, [pc, #468]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fd fc80 	bl	8001748 <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e4c:	f7fd fc7c 	bl	8001748 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e195      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e5e:	4b6d      	ldr	r3, [pc, #436]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d021      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11d      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e7e:	4b65      	ldr	r3, [pc, #404]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e8c:	4b61      	ldr	r3, [pc, #388]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e92:	0e1b      	lsrs	r3, r3, #24
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	019a      	lsls	r2, r3, #6
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	071b      	lsls	r3, r3, #28
 8003eb2:	4958      	ldr	r1, [pc, #352]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d004      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02e      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee4:	d129      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ee6:	4b4b      	ldr	r3, [pc, #300]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ef4:	4b47      	ldr	r3, [pc, #284]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efa:	0f1b      	lsrs	r3, r3, #28
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	019a      	lsls	r2, r3, #6
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	061b      	lsls	r3, r3, #24
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	071b      	lsls	r3, r3, #28
 8003f1a:	493e      	ldr	r1, [pc, #248]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f22:	4b3c      	ldr	r3, [pc, #240]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f28:	f023 021f 	bic.w	r2, r3, #31
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	3b01      	subs	r3, #1
 8003f32:	4938      	ldr	r1, [pc, #224]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01d      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f46:	4b33      	ldr	r3, [pc, #204]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	0e1b      	lsrs	r3, r3, #24
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f54:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5a:	0f1b      	lsrs	r3, r3, #28
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	019a      	lsls	r2, r3, #6
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	071b      	lsls	r3, r3, #28
 8003f7a:	4926      	ldr	r1, [pc, #152]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d011      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	019a      	lsls	r2, r3, #6
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	491a      	ldr	r1, [pc, #104]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fd fbc3 	bl	8001748 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fc6:	f7fd fbbf 	bl	8001748 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	; 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0d8      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	f040 80ce 	bne.w	8004188 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff8:	f7fd fba6 	bl	8001748 <HAL_GetTick>
 8003ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ffe:	e00b      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004000:	f7fd fba2 	bl	8001748 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d904      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e0bb      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004018:	4b5e      	ldr	r3, [pc, #376]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004024:	d0ec      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004042:	2b00      	cmp	r3, #0
 8004044:	d02e      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d12a      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800404e:	4b51      	ldr	r3, [pc, #324]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800405c:	4b4d      	ldr	r3, [pc, #308]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	0f1b      	lsrs	r3, r3, #28
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	019a      	lsls	r2, r3, #6
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	071b      	lsls	r3, r3, #28
 8004082:	4944      	ldr	r1, [pc, #272]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800408a:	4b42      	ldr	r3, [pc, #264]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800408c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004090:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	3b01      	subs	r3, #1
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	493d      	ldr	r1, [pc, #244]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d022      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b8:	d11d      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	0e1b      	lsrs	r3, r3, #24
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040c8:	4b32      	ldr	r3, [pc, #200]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	0f1b      	lsrs	r3, r3, #28
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	019a      	lsls	r2, r3, #6
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	431a      	orrs	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	071b      	lsls	r3, r3, #28
 80040ee:	4929      	ldr	r1, [pc, #164]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d028      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	0e1b      	lsrs	r3, r3, #24
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	0c1b      	lsrs	r3, r3, #16
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	019a      	lsls	r2, r3, #6
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	041b      	lsls	r3, r3, #16
 8004128:	431a      	orrs	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	071b      	lsls	r3, r3, #28
 8004136:	4917      	ldr	r1, [pc, #92]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4911      	ldr	r1, [pc, #68]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a0e      	ldr	r2, [pc, #56]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004160:	f7fd faf2 	bl	8001748 <HAL_GetTick>
 8004164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004168:	f7fd faee 	bl	8001748 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e007      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004186:	d1ef      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800

08004198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e040      	b.n	800422c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fc fef8 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f82c 	bl	8004234 <UART_SetConfig>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e022      	b.n	800422c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa84 	bl	80046fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fb0b 	bl	8004840 <UART_CheckIdleState>
 800422a:	4603      	mov	r3, r0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4ba6      	ldr	r3, [pc, #664]	; (80044f8 <UART_SetConfig+0x2c4>)
 8004260:	4013      	ands	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	430b      	orrs	r3, r1
 800426a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a94      	ldr	r2, [pc, #592]	; (80044fc <UART_SetConfig+0x2c8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d120      	bne.n	80042f2 <UART_SetConfig+0xbe>
 80042b0:	4b93      	ldr	r3, [pc, #588]	; (8004500 <UART_SetConfig+0x2cc>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d816      	bhi.n	80042ec <UART_SetConfig+0xb8>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0x90>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042e1 	.word	0x080042e1
 80042cc:	080042db 	.word	0x080042db
 80042d0:	080042e7 	.word	0x080042e7
 80042d4:	2301      	movs	r3, #1
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e150      	b.n	800457c <UART_SetConfig+0x348>
 80042da:	2302      	movs	r3, #2
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e14d      	b.n	800457c <UART_SetConfig+0x348>
 80042e0:	2304      	movs	r3, #4
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e14a      	b.n	800457c <UART_SetConfig+0x348>
 80042e6:	2308      	movs	r3, #8
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e147      	b.n	800457c <UART_SetConfig+0x348>
 80042ec:	2310      	movs	r3, #16
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e144      	b.n	800457c <UART_SetConfig+0x348>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a83      	ldr	r2, [pc, #524]	; (8004504 <UART_SetConfig+0x2d0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d132      	bne.n	8004362 <UART_SetConfig+0x12e>
 80042fc:	4b80      	ldr	r3, [pc, #512]	; (8004500 <UART_SetConfig+0x2cc>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b0c      	cmp	r3, #12
 8004308:	d828      	bhi.n	800435c <UART_SetConfig+0x128>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <UART_SetConfig+0xdc>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004345 	.word	0x08004345
 8004314:	0800435d 	.word	0x0800435d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800435d 	.word	0x0800435d
 8004320:	08004351 	.word	0x08004351
 8004324:	0800435d 	.word	0x0800435d
 8004328:	0800435d 	.word	0x0800435d
 800432c:	0800435d 	.word	0x0800435d
 8004330:	0800434b 	.word	0x0800434b
 8004334:	0800435d 	.word	0x0800435d
 8004338:	0800435d 	.word	0x0800435d
 800433c:	0800435d 	.word	0x0800435d
 8004340:	08004357 	.word	0x08004357
 8004344:	2300      	movs	r3, #0
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e118      	b.n	800457c <UART_SetConfig+0x348>
 800434a:	2302      	movs	r3, #2
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e115      	b.n	800457c <UART_SetConfig+0x348>
 8004350:	2304      	movs	r3, #4
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e112      	b.n	800457c <UART_SetConfig+0x348>
 8004356:	2308      	movs	r3, #8
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e10f      	b.n	800457c <UART_SetConfig+0x348>
 800435c:	2310      	movs	r3, #16
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e10c      	b.n	800457c <UART_SetConfig+0x348>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a68      	ldr	r2, [pc, #416]	; (8004508 <UART_SetConfig+0x2d4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d120      	bne.n	80043ae <UART_SetConfig+0x17a>
 800436c:	4b64      	ldr	r3, [pc, #400]	; (8004500 <UART_SetConfig+0x2cc>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004376:	2b30      	cmp	r3, #48	; 0x30
 8004378:	d013      	beq.n	80043a2 <UART_SetConfig+0x16e>
 800437a:	2b30      	cmp	r3, #48	; 0x30
 800437c:	d814      	bhi.n	80043a8 <UART_SetConfig+0x174>
 800437e:	2b20      	cmp	r3, #32
 8004380:	d009      	beq.n	8004396 <UART_SetConfig+0x162>
 8004382:	2b20      	cmp	r3, #32
 8004384:	d810      	bhi.n	80043a8 <UART_SetConfig+0x174>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <UART_SetConfig+0x15c>
 800438a:	2b10      	cmp	r3, #16
 800438c:	d006      	beq.n	800439c <UART_SetConfig+0x168>
 800438e:	e00b      	b.n	80043a8 <UART_SetConfig+0x174>
 8004390:	2300      	movs	r3, #0
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e0f2      	b.n	800457c <UART_SetConfig+0x348>
 8004396:	2302      	movs	r3, #2
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e0ef      	b.n	800457c <UART_SetConfig+0x348>
 800439c:	2304      	movs	r3, #4
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e0ec      	b.n	800457c <UART_SetConfig+0x348>
 80043a2:	2308      	movs	r3, #8
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	e0e9      	b.n	800457c <UART_SetConfig+0x348>
 80043a8:	2310      	movs	r3, #16
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e0e6      	b.n	800457c <UART_SetConfig+0x348>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a56      	ldr	r2, [pc, #344]	; (800450c <UART_SetConfig+0x2d8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d120      	bne.n	80043fa <UART_SetConfig+0x1c6>
 80043b8:	4b51      	ldr	r3, [pc, #324]	; (8004500 <UART_SetConfig+0x2cc>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043c2:	2bc0      	cmp	r3, #192	; 0xc0
 80043c4:	d013      	beq.n	80043ee <UART_SetConfig+0x1ba>
 80043c6:	2bc0      	cmp	r3, #192	; 0xc0
 80043c8:	d814      	bhi.n	80043f4 <UART_SetConfig+0x1c0>
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d009      	beq.n	80043e2 <UART_SetConfig+0x1ae>
 80043ce:	2b80      	cmp	r3, #128	; 0x80
 80043d0:	d810      	bhi.n	80043f4 <UART_SetConfig+0x1c0>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <UART_SetConfig+0x1a8>
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d006      	beq.n	80043e8 <UART_SetConfig+0x1b4>
 80043da:	e00b      	b.n	80043f4 <UART_SetConfig+0x1c0>
 80043dc:	2300      	movs	r3, #0
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e0cc      	b.n	800457c <UART_SetConfig+0x348>
 80043e2:	2302      	movs	r3, #2
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e0c9      	b.n	800457c <UART_SetConfig+0x348>
 80043e8:	2304      	movs	r3, #4
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e0c6      	b.n	800457c <UART_SetConfig+0x348>
 80043ee:	2308      	movs	r3, #8
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e0c3      	b.n	800457c <UART_SetConfig+0x348>
 80043f4:	2310      	movs	r3, #16
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e0c0      	b.n	800457c <UART_SetConfig+0x348>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a44      	ldr	r2, [pc, #272]	; (8004510 <UART_SetConfig+0x2dc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d125      	bne.n	8004450 <UART_SetConfig+0x21c>
 8004404:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <UART_SetConfig+0x2cc>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004412:	d017      	beq.n	8004444 <UART_SetConfig+0x210>
 8004414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004418:	d817      	bhi.n	800444a <UART_SetConfig+0x216>
 800441a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441e:	d00b      	beq.n	8004438 <UART_SetConfig+0x204>
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d811      	bhi.n	800444a <UART_SetConfig+0x216>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <UART_SetConfig+0x1fe>
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	d006      	beq.n	800443e <UART_SetConfig+0x20a>
 8004430:	e00b      	b.n	800444a <UART_SetConfig+0x216>
 8004432:	2300      	movs	r3, #0
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e0a1      	b.n	800457c <UART_SetConfig+0x348>
 8004438:	2302      	movs	r3, #2
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e09e      	b.n	800457c <UART_SetConfig+0x348>
 800443e:	2304      	movs	r3, #4
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e09b      	b.n	800457c <UART_SetConfig+0x348>
 8004444:	2308      	movs	r3, #8
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e098      	b.n	800457c <UART_SetConfig+0x348>
 800444a:	2310      	movs	r3, #16
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e095      	b.n	800457c <UART_SetConfig+0x348>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a2f      	ldr	r2, [pc, #188]	; (8004514 <UART_SetConfig+0x2e0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d125      	bne.n	80044a6 <UART_SetConfig+0x272>
 800445a:	4b29      	ldr	r3, [pc, #164]	; (8004500 <UART_SetConfig+0x2cc>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004468:	d017      	beq.n	800449a <UART_SetConfig+0x266>
 800446a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800446e:	d817      	bhi.n	80044a0 <UART_SetConfig+0x26c>
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d00b      	beq.n	800448e <UART_SetConfig+0x25a>
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447a:	d811      	bhi.n	80044a0 <UART_SetConfig+0x26c>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <UART_SetConfig+0x254>
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004484:	d006      	beq.n	8004494 <UART_SetConfig+0x260>
 8004486:	e00b      	b.n	80044a0 <UART_SetConfig+0x26c>
 8004488:	2301      	movs	r3, #1
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e076      	b.n	800457c <UART_SetConfig+0x348>
 800448e:	2302      	movs	r3, #2
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e073      	b.n	800457c <UART_SetConfig+0x348>
 8004494:	2304      	movs	r3, #4
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e070      	b.n	800457c <UART_SetConfig+0x348>
 800449a:	2308      	movs	r3, #8
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e06d      	b.n	800457c <UART_SetConfig+0x348>
 80044a0:	2310      	movs	r3, #16
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e06a      	b.n	800457c <UART_SetConfig+0x348>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <UART_SetConfig+0x2e4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d138      	bne.n	8004522 <UART_SetConfig+0x2ee>
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <UART_SetConfig+0x2cc>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044be:	d017      	beq.n	80044f0 <UART_SetConfig+0x2bc>
 80044c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044c4:	d82a      	bhi.n	800451c <UART_SetConfig+0x2e8>
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ca:	d00b      	beq.n	80044e4 <UART_SetConfig+0x2b0>
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d0:	d824      	bhi.n	800451c <UART_SetConfig+0x2e8>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <UART_SetConfig+0x2aa>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044da:	d006      	beq.n	80044ea <UART_SetConfig+0x2b6>
 80044dc:	e01e      	b.n	800451c <UART_SetConfig+0x2e8>
 80044de:	2300      	movs	r3, #0
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e04b      	b.n	800457c <UART_SetConfig+0x348>
 80044e4:	2302      	movs	r3, #2
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e048      	b.n	800457c <UART_SetConfig+0x348>
 80044ea:	2304      	movs	r3, #4
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e045      	b.n	800457c <UART_SetConfig+0x348>
 80044f0:	2308      	movs	r3, #8
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e042      	b.n	800457c <UART_SetConfig+0x348>
 80044f6:	bf00      	nop
 80044f8:	efff69f3 	.word	0xefff69f3
 80044fc:	40011000 	.word	0x40011000
 8004500:	40023800 	.word	0x40023800
 8004504:	40004400 	.word	0x40004400
 8004508:	40004800 	.word	0x40004800
 800450c:	40004c00 	.word	0x40004c00
 8004510:	40005000 	.word	0x40005000
 8004514:	40011400 	.word	0x40011400
 8004518:	40007800 	.word	0x40007800
 800451c:	2310      	movs	r3, #16
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e02c      	b.n	800457c <UART_SetConfig+0x348>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a72      	ldr	r2, [pc, #456]	; (80046f0 <UART_SetConfig+0x4bc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d125      	bne.n	8004578 <UART_SetConfig+0x344>
 800452c:	4b71      	ldr	r3, [pc, #452]	; (80046f4 <UART_SetConfig+0x4c0>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004536:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800453a:	d017      	beq.n	800456c <UART_SetConfig+0x338>
 800453c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004540:	d817      	bhi.n	8004572 <UART_SetConfig+0x33e>
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004546:	d00b      	beq.n	8004560 <UART_SetConfig+0x32c>
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454c:	d811      	bhi.n	8004572 <UART_SetConfig+0x33e>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <UART_SetConfig+0x326>
 8004552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004556:	d006      	beq.n	8004566 <UART_SetConfig+0x332>
 8004558:	e00b      	b.n	8004572 <UART_SetConfig+0x33e>
 800455a:	2300      	movs	r3, #0
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e00d      	b.n	800457c <UART_SetConfig+0x348>
 8004560:	2302      	movs	r3, #2
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e00a      	b.n	800457c <UART_SetConfig+0x348>
 8004566:	2304      	movs	r3, #4
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e007      	b.n	800457c <UART_SetConfig+0x348>
 800456c:	2308      	movs	r3, #8
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e004      	b.n	800457c <UART_SetConfig+0x348>
 8004572:	2310      	movs	r3, #16
 8004574:	77fb      	strb	r3, [r7, #31]
 8004576:	e001      	b.n	800457c <UART_SetConfig+0x348>
 8004578:	2310      	movs	r3, #16
 800457a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004584:	d15b      	bne.n	800463e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d828      	bhi.n	80045de <UART_SetConfig+0x3aa>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0x360>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045b9 	.word	0x080045b9
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045c9 	.word	0x080045c9
 80045a0:	080045df 	.word	0x080045df
 80045a4:	080045cf 	.word	0x080045cf
 80045a8:	080045df 	.word	0x080045df
 80045ac:	080045df 	.word	0x080045df
 80045b0:	080045df 	.word	0x080045df
 80045b4:	080045d7 	.word	0x080045d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7ff f99e 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 80045bc:	61b8      	str	r0, [r7, #24]
        break;
 80045be:	e013      	b.n	80045e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c0:	f7ff f9ae 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 80045c4:	61b8      	str	r0, [r7, #24]
        break;
 80045c6:	e00f      	b.n	80045e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c8:	4b4b      	ldr	r3, [pc, #300]	; (80046f8 <UART_SetConfig+0x4c4>)
 80045ca:	61bb      	str	r3, [r7, #24]
        break;
 80045cc:	e00c      	b.n	80045e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ce:	f7ff f881 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 80045d2:	61b8      	str	r0, [r7, #24]
        break;
 80045d4:	e008      	b.n	80045e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045da:	61bb      	str	r3, [r7, #24]
        break;
 80045dc:	e004      	b.n	80045e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	77bb      	strb	r3, [r7, #30]
        break;
 80045e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d074      	beq.n	80046d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	005a      	lsls	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b0f      	cmp	r3, #15
 8004608:	d916      	bls.n	8004638 <UART_SetConfig+0x404>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d212      	bcs.n	8004638 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f023 030f 	bic.w	r3, r3, #15
 800461a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	b29a      	uxth	r2, r3
 8004628:	89fb      	ldrh	r3, [r7, #14]
 800462a:	4313      	orrs	r3, r2
 800462c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	89fa      	ldrh	r2, [r7, #14]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	e04f      	b.n	80046d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	77bb      	strb	r3, [r7, #30]
 800463c:	e04c      	b.n	80046d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800463e:	7ffb      	ldrb	r3, [r7, #31]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d828      	bhi.n	8004696 <UART_SetConfig+0x462>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0x418>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004671 	.word	0x08004671
 8004650:	08004679 	.word	0x08004679
 8004654:	08004681 	.word	0x08004681
 8004658:	08004697 	.word	0x08004697
 800465c:	08004687 	.word	0x08004687
 8004660:	08004697 	.word	0x08004697
 8004664:	08004697 	.word	0x08004697
 8004668:	08004697 	.word	0x08004697
 800466c:	0800468f 	.word	0x0800468f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004670:	f7ff f942 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 8004674:	61b8      	str	r0, [r7, #24]
        break;
 8004676:	e013      	b.n	80046a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004678:	f7ff f952 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 800467c:	61b8      	str	r0, [r7, #24]
        break;
 800467e:	e00f      	b.n	80046a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004680:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <UART_SetConfig+0x4c4>)
 8004682:	61bb      	str	r3, [r7, #24]
        break;
 8004684:	e00c      	b.n	80046a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004686:	f7ff f825 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 800468a:	61b8      	str	r0, [r7, #24]
        break;
 800468c:	e008      	b.n	80046a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004692:	61bb      	str	r3, [r7, #24]
        break;
 8004694:	e004      	b.n	80046a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	77bb      	strb	r3, [r7, #30]
        break;
 800469e:	bf00      	nop
    }

    if (pclk != 0U)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d018      	beq.n	80046d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	085a      	lsrs	r2, r3, #1
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b0f      	cmp	r3, #15
 80046be:	d909      	bls.n	80046d4 <UART_SetConfig+0x4a0>
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c6:	d205      	bcs.n	80046d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e001      	b.n	80046d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40007c00 	.word	0x40007c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	00f42400 	.word	0x00f42400

080046fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01a      	beq.n	8004812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fa:	d10a      	bne.n	8004812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af02      	add	r7, sp, #8
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004850:	f7fc ff7a 	bl	8001748 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b08      	cmp	r3, #8
 8004862:	d10e      	bne.n	8004882 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f831 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e027      	b.n	80048d2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d10e      	bne.n	80048ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f81b 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e011      	b.n	80048d2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b09c      	sub	sp, #112	; 0x70
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ea:	e0a7      	b.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	f000 80a3 	beq.w	8004a3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7fc ff27 	bl	8001748 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <UART_WaitOnFlagUntilTimeout+0x32>
 8004906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004908:	2b00      	cmp	r3, #0
 800490a:	d13f      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800491a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004920:	667b      	str	r3, [r7, #100]	; 0x64
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800492c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004930:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e6      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	663b      	str	r3, [r7, #96]	; 0x60
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800495e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800496c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e5      	bne.n	800493e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e068      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d050      	beq.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a8:	d148      	bne.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
 80049d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e6      	bne.n	80049b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3308      	adds	r3, #8
 80049ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	613b      	str	r3, [r7, #16]
   return(result);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3308      	adds	r3, #8
 8004a04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a06:	623a      	str	r2, [r7, #32]
 8004a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	69f9      	ldr	r1, [r7, #28]
 8004a0c:	6a3a      	ldr	r2, [r7, #32]
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e5      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e010      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	f43f af48 	beq.w	80048ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3770      	adds	r7, #112	; 0x70
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a68:	b084      	sub	sp, #16
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	f107 001c 	add.w	r0, r7, #28
 8004a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d120      	bne.n	8004ac2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <USB_CoreInit+0xac>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa96 	bl	8004fe8 <USB_CoreReset>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
 8004ac0:	e010      	b.n	8004ae4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fa8a 	bl	8004fe8 <USB_CoreReset>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10b      	bne.n	8004b02 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f043 0206 	orr.w	r2, r3, #6
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b0e:	b004      	add	sp, #16
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	ffbdffbf 	.word	0xffbdffbf

08004b18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f023 0201 	bic.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d115      	bne.n	8004b88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f7fc fdf9 	bl	8001760 <HAL_Delay>
      ms++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fa29 	bl	8004fcc <USB_GetMode>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d01e      	beq.n	8004bbe <USB_SetCurrentMode+0x84>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b31      	cmp	r3, #49	; 0x31
 8004b84:	d9f0      	bls.n	8004b68 <USB_SetCurrentMode+0x2e>
 8004b86:	e01a      	b.n	8004bbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d115      	bne.n	8004bba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	f7fc fde0 	bl	8001760 <HAL_Delay>
      ms++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa10 	bl	8004fcc <USB_GetMode>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <USB_SetCurrentMode+0x84>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b31      	cmp	r3, #49	; 0x31
 8004bb6:	d9f0      	bls.n	8004b9a <USB_SetCurrentMode+0x60>
 8004bb8:	e001      	b.n	8004bbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e005      	b.n	8004bca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b32      	cmp	r3, #50	; 0x32
 8004bc2:	d101      	bne.n	8004bc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e009      	b.n	8004c08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3340      	adds	r3, #64	; 0x40
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3301      	adds	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b0e      	cmp	r3, #14
 8004c0c:	d9f2      	bls.n	8004bf4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11c      	bne.n	8004c4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c22:	f043 0302 	orr.w	r3, r3, #2
 8004c26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e005      	b.n	8004c5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c60:	461a      	mov	r2, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c74:	461a      	mov	r2, r3
 8004c76:	680b      	ldr	r3, [r1, #0]
 8004c78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10c      	bne.n	8004c9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c86:	2100      	movs	r1, #0
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f965 	bl	8004f58 <USB_SetDevSpeed>
 8004c8e:	e008      	b.n	8004ca2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c90:	2101      	movs	r1, #1
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f960 	bl	8004f58 <USB_SetDevSpeed>
 8004c98:	e003      	b.n	8004ca2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c9a:	2103      	movs	r1, #3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f95b 	bl	8004f58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ca2:	2110      	movs	r1, #16
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f8f3 	bl	8004e90 <USB_FlushTxFifo>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f91f 	bl	8004ef8 <USB_FlushRxFifo>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	e043      	b.n	8004d76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d04:	d118      	bne.n	8004d38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e013      	b.n	8004d4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e008      	b.n	8004d4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	461a      	mov	r2, r3
 8004d46:	2300      	movs	r3, #0
 8004d48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	461a      	mov	r2, r3
 8004d58:	2300      	movs	r3, #0
 8004d5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3301      	adds	r3, #1
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d3b7      	bcc.n	8004cee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e043      	b.n	8004e0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d9a:	d118      	bne.n	8004dce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	461a      	mov	r2, r3
 8004db0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	e013      	b.n	8004de0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	e008      	b.n	8004de0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	2300      	movs	r3, #0
 8004df0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d3b7      	bcc.n	8004d84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f043 0210 	orr.w	r2, r3, #16
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <USB_DevInit+0x2b4>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f043 0208 	orr.w	r2, r3, #8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <USB_DevInit+0x2b8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e84:	b004      	add	sp, #16
 8004e86:	4770      	bx	lr
 8004e88:	803c3800 	.word	0x803c3800
 8004e8c:	40000004 	.word	0x40000004

08004e90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <USB_FlushTxFifo+0x64>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e01b      	b.n	8004ee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	daf2      	bge.n	8004e9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	019b      	lsls	r3, r3, #6
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <USB_FlushTxFifo+0x64>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e006      	b.n	8004ee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d0f0      	beq.n	8004ec8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	00030d40 	.word	0x00030d40

08004ef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3301      	adds	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <USB_FlushRxFifo+0x5c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e018      	b.n	8004f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	daf2      	bge.n	8004f04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2210      	movs	r2, #16
 8004f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <USB_FlushRxFifo+0x5c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e006      	b.n	8004f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d0f0      	beq.n	8004f28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	00030d40 	.word	0x00030d40

08004f58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fa4:	f023 0303 	bic.w	r3, r3, #3
 8004fa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a13      	ldr	r2, [pc, #76]	; (800504c <USB_CoreReset+0x64>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e01b      	b.n	800503e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	daf2      	bge.n	8004ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4a09      	ldr	r2, [pc, #36]	; (800504c <USB_CoreReset+0x64>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e006      	b.n	800503e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d0f0      	beq.n	800501e <USB_CoreReset+0x36>

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	00030d40 	.word	0x00030d40

08005050 <__errno>:
 8005050:	4b01      	ldr	r3, [pc, #4]	; (8005058 <__errno+0x8>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000000c 	.word	0x2000000c

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4d0d      	ldr	r5, [pc, #52]	; (8005094 <__libc_init_array+0x38>)
 8005060:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005062:	1b64      	subs	r4, r4, r5
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	2600      	movs	r6, #0
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	4d0b      	ldr	r5, [pc, #44]	; (800509c <__libc_init_array+0x40>)
 800506e:	4c0c      	ldr	r4, [pc, #48]	; (80050a0 <__libc_init_array+0x44>)
 8005070:	f001 f8ba 	bl	80061e8 <_init>
 8005074:	1b64      	subs	r4, r4, r5
 8005076:	10a4      	asrs	r4, r4, #2
 8005078:	2600      	movs	r6, #0
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f855 3b04 	ldr.w	r3, [r5], #4
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f855 3b04 	ldr.w	r3, [r5], #4
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	08006368 	.word	0x08006368
 8005098:	08006368 	.word	0x08006368
 800509c:	08006368 	.word	0x08006368
 80050a0:	0800636c 	.word	0x0800636c

080050a4 <memset>:
 80050a4:	4402      	add	r2, r0
 80050a6:	4603      	mov	r3, r0
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d100      	bne.n	80050ae <memset+0xa>
 80050ac:	4770      	bx	lr
 80050ae:	f803 1b01 	strb.w	r1, [r3], #1
 80050b2:	e7f9      	b.n	80050a8 <memset+0x4>

080050b4 <srand>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <srand+0x44>)
 80050b8:	681d      	ldr	r5, [r3, #0]
 80050ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050bc:	4604      	mov	r4, r0
 80050be:	b9b3      	cbnz	r3, 80050ee <srand+0x3a>
 80050c0:	2018      	movs	r0, #24
 80050c2:	f000 fb9f 	bl	8005804 <malloc>
 80050c6:	4602      	mov	r2, r0
 80050c8:	63a8      	str	r0, [r5, #56]	; 0x38
 80050ca:	b920      	cbnz	r0, 80050d6 <srand+0x22>
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <srand+0x48>)
 80050ce:	480c      	ldr	r0, [pc, #48]	; (8005100 <srand+0x4c>)
 80050d0:	2142      	movs	r1, #66	; 0x42
 80050d2:	f000 f935 	bl	8005340 <__assert_func>
 80050d6:	490b      	ldr	r1, [pc, #44]	; (8005104 <srand+0x50>)
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <srand+0x54>)
 80050da:	e9c0 1300 	strd	r1, r3, [r0]
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <srand+0x58>)
 80050e0:	6083      	str	r3, [r0, #8]
 80050e2:	230b      	movs	r3, #11
 80050e4:	8183      	strh	r3, [r0, #12]
 80050e6:	2100      	movs	r1, #0
 80050e8:	2001      	movs	r0, #1
 80050ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80050ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050f0:	2200      	movs	r2, #0
 80050f2:	611c      	str	r4, [r3, #16]
 80050f4:	615a      	str	r2, [r3, #20]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	2000000c 	.word	0x2000000c
 80050fc:	0800621c 	.word	0x0800621c
 8005100:	08006233 	.word	0x08006233
 8005104:	abcd330e 	.word	0xabcd330e
 8005108:	e66d1234 	.word	0xe66d1234
 800510c:	0005deec 	.word	0x0005deec

08005110 <rand>:
 8005110:	4b16      	ldr	r3, [pc, #88]	; (800516c <rand+0x5c>)
 8005112:	b510      	push	{r4, lr}
 8005114:	681c      	ldr	r4, [r3, #0]
 8005116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005118:	b9b3      	cbnz	r3, 8005148 <rand+0x38>
 800511a:	2018      	movs	r0, #24
 800511c:	f000 fb72 	bl	8005804 <malloc>
 8005120:	63a0      	str	r0, [r4, #56]	; 0x38
 8005122:	b928      	cbnz	r0, 8005130 <rand+0x20>
 8005124:	4602      	mov	r2, r0
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <rand+0x60>)
 8005128:	4812      	ldr	r0, [pc, #72]	; (8005174 <rand+0x64>)
 800512a:	214e      	movs	r1, #78	; 0x4e
 800512c:	f000 f908 	bl	8005340 <__assert_func>
 8005130:	4a11      	ldr	r2, [pc, #68]	; (8005178 <rand+0x68>)
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <rand+0x6c>)
 8005134:	e9c0 2300 	strd	r2, r3, [r0]
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <rand+0x70>)
 800513a:	6083      	str	r3, [r0, #8]
 800513c:	230b      	movs	r3, #11
 800513e:	8183      	strh	r3, [r0, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	2300      	movs	r3, #0
 8005144:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005148:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800514a:	4a0e      	ldr	r2, [pc, #56]	; (8005184 <rand+0x74>)
 800514c:	6920      	ldr	r0, [r4, #16]
 800514e:	6963      	ldr	r3, [r4, #20]
 8005150:	490d      	ldr	r1, [pc, #52]	; (8005188 <rand+0x78>)
 8005152:	4342      	muls	r2, r0
 8005154:	fb01 2203 	mla	r2, r1, r3, r2
 8005158:	fba0 0101 	umull	r0, r1, r0, r1
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	eb42 0001 	adc.w	r0, r2, r1
 8005162:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005166:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800516a:	bd10      	pop	{r4, pc}
 800516c:	2000000c 	.word	0x2000000c
 8005170:	0800621c 	.word	0x0800621c
 8005174:	08006233 	.word	0x08006233
 8005178:	abcd330e 	.word	0xabcd330e
 800517c:	e66d1234 	.word	0xe66d1234
 8005180:	0005deec 	.word	0x0005deec
 8005184:	5851f42d 	.word	0x5851f42d
 8005188:	4c957f2d 	.word	0x4c957f2d

0800518c <time>:
 800518c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <time+0x30>)
 8005190:	2200      	movs	r2, #0
 8005192:	4669      	mov	r1, sp
 8005194:	4604      	mov	r4, r0
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	f000 faba 	bl	8005710 <_gettimeofday_r>
 800519c:	2800      	cmp	r0, #0
 800519e:	bfbe      	ittt	lt
 80051a0:	f04f 32ff 	movlt.w	r2, #4294967295
 80051a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80051a8:	e9cd 2300 	strdlt	r2, r3, [sp]
 80051ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051b0:	b10c      	cbz	r4, 80051b6 <time+0x2a>
 80051b2:	e9c4 0100 	strd	r0, r1, [r4]
 80051b6:	b004      	add	sp, #16
 80051b8:	bd10      	pop	{r4, pc}
 80051ba:	bf00      	nop
 80051bc:	2000000c 	.word	0x2000000c

080051c0 <__swbuf_r>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	460e      	mov	r6, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	4605      	mov	r5, r0
 80051c8:	b118      	cbz	r0, 80051d2 <__swbuf_r+0x12>
 80051ca:	6983      	ldr	r3, [r0, #24]
 80051cc:	b90b      	cbnz	r3, 80051d2 <__swbuf_r+0x12>
 80051ce:	f000 f9ef 	bl	80055b0 <__sinit>
 80051d2:	4b21      	ldr	r3, [pc, #132]	; (8005258 <__swbuf_r+0x98>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	d12b      	bne.n	8005230 <__swbuf_r+0x70>
 80051d8:	686c      	ldr	r4, [r5, #4]
 80051da:	69a3      	ldr	r3, [r4, #24]
 80051dc:	60a3      	str	r3, [r4, #8]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	071a      	lsls	r2, r3, #28
 80051e2:	d52f      	bpl.n	8005244 <__swbuf_r+0x84>
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	b36b      	cbz	r3, 8005244 <__swbuf_r+0x84>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	6820      	ldr	r0, [r4, #0]
 80051ec:	1ac0      	subs	r0, r0, r3
 80051ee:	6963      	ldr	r3, [r4, #20]
 80051f0:	b2f6      	uxtb	r6, r6
 80051f2:	4283      	cmp	r3, r0
 80051f4:	4637      	mov	r7, r6
 80051f6:	dc04      	bgt.n	8005202 <__swbuf_r+0x42>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 f944 	bl	8005488 <_fflush_r>
 8005200:	bb30      	cbnz	r0, 8005250 <__swbuf_r+0x90>
 8005202:	68a3      	ldr	r3, [r4, #8]
 8005204:	3b01      	subs	r3, #1
 8005206:	60a3      	str	r3, [r4, #8]
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	701e      	strb	r6, [r3, #0]
 8005210:	6963      	ldr	r3, [r4, #20]
 8005212:	3001      	adds	r0, #1
 8005214:	4283      	cmp	r3, r0
 8005216:	d004      	beq.n	8005222 <__swbuf_r+0x62>
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	07db      	lsls	r3, r3, #31
 800521c:	d506      	bpl.n	800522c <__swbuf_r+0x6c>
 800521e:	2e0a      	cmp	r6, #10
 8005220:	d104      	bne.n	800522c <__swbuf_r+0x6c>
 8005222:	4621      	mov	r1, r4
 8005224:	4628      	mov	r0, r5
 8005226:	f000 f92f 	bl	8005488 <_fflush_r>
 800522a:	b988      	cbnz	r0, 8005250 <__swbuf_r+0x90>
 800522c:	4638      	mov	r0, r7
 800522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <__swbuf_r+0x9c>)
 8005232:	429c      	cmp	r4, r3
 8005234:	d101      	bne.n	800523a <__swbuf_r+0x7a>
 8005236:	68ac      	ldr	r4, [r5, #8]
 8005238:	e7cf      	b.n	80051da <__swbuf_r+0x1a>
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <__swbuf_r+0xa0>)
 800523c:	429c      	cmp	r4, r3
 800523e:	bf08      	it	eq
 8005240:	68ec      	ldreq	r4, [r5, #12]
 8005242:	e7ca      	b.n	80051da <__swbuf_r+0x1a>
 8005244:	4621      	mov	r1, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f80c 	bl	8005264 <__swsetup_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	d0cb      	beq.n	80051e8 <__swbuf_r+0x28>
 8005250:	f04f 37ff 	mov.w	r7, #4294967295
 8005254:	e7ea      	b.n	800522c <__swbuf_r+0x6c>
 8005256:	bf00      	nop
 8005258:	080062ec 	.word	0x080062ec
 800525c:	0800630c 	.word	0x0800630c
 8005260:	080062cc 	.word	0x080062cc

08005264 <__swsetup_r>:
 8005264:	4b32      	ldr	r3, [pc, #200]	; (8005330 <__swsetup_r+0xcc>)
 8005266:	b570      	push	{r4, r5, r6, lr}
 8005268:	681d      	ldr	r5, [r3, #0]
 800526a:	4606      	mov	r6, r0
 800526c:	460c      	mov	r4, r1
 800526e:	b125      	cbz	r5, 800527a <__swsetup_r+0x16>
 8005270:	69ab      	ldr	r3, [r5, #24]
 8005272:	b913      	cbnz	r3, 800527a <__swsetup_r+0x16>
 8005274:	4628      	mov	r0, r5
 8005276:	f000 f99b 	bl	80055b0 <__sinit>
 800527a:	4b2e      	ldr	r3, [pc, #184]	; (8005334 <__swsetup_r+0xd0>)
 800527c:	429c      	cmp	r4, r3
 800527e:	d10f      	bne.n	80052a0 <__swsetup_r+0x3c>
 8005280:	686c      	ldr	r4, [r5, #4]
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005288:	0719      	lsls	r1, r3, #28
 800528a:	d42c      	bmi.n	80052e6 <__swsetup_r+0x82>
 800528c:	06dd      	lsls	r5, r3, #27
 800528e:	d411      	bmi.n	80052b4 <__swsetup_r+0x50>
 8005290:	2309      	movs	r3, #9
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	f04f 30ff 	mov.w	r0, #4294967295
 800529e:	e03e      	b.n	800531e <__swsetup_r+0xba>
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <__swsetup_r+0xd4>)
 80052a2:	429c      	cmp	r4, r3
 80052a4:	d101      	bne.n	80052aa <__swsetup_r+0x46>
 80052a6:	68ac      	ldr	r4, [r5, #8]
 80052a8:	e7eb      	b.n	8005282 <__swsetup_r+0x1e>
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <__swsetup_r+0xd8>)
 80052ac:	429c      	cmp	r4, r3
 80052ae:	bf08      	it	eq
 80052b0:	68ec      	ldreq	r4, [r5, #12]
 80052b2:	e7e6      	b.n	8005282 <__swsetup_r+0x1e>
 80052b4:	0758      	lsls	r0, r3, #29
 80052b6:	d512      	bpl.n	80052de <__swsetup_r+0x7a>
 80052b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ba:	b141      	cbz	r1, 80052ce <__swsetup_r+0x6a>
 80052bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052c0:	4299      	cmp	r1, r3
 80052c2:	d002      	beq.n	80052ca <__swsetup_r+0x66>
 80052c4:	4630      	mov	r0, r6
 80052c6:	f000 faa5 	bl	8005814 <_free_r>
 80052ca:	2300      	movs	r3, #0
 80052cc:	6363      	str	r3, [r4, #52]	; 0x34
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	2300      	movs	r3, #0
 80052d8:	6063      	str	r3, [r4, #4]
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f043 0308 	orr.w	r3, r3, #8
 80052e4:	81a3      	strh	r3, [r4, #12]
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	b94b      	cbnz	r3, 80052fe <__swsetup_r+0x9a>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	d003      	beq.n	80052fe <__swsetup_r+0x9a>
 80052f6:	4621      	mov	r1, r4
 80052f8:	4630      	mov	r0, r6
 80052fa:	f000 fa43 	bl	8005784 <__smakebuf_r>
 80052fe:	89a0      	ldrh	r0, [r4, #12]
 8005300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005304:	f010 0301 	ands.w	r3, r0, #1
 8005308:	d00a      	beq.n	8005320 <__swsetup_r+0xbc>
 800530a:	2300      	movs	r3, #0
 800530c:	60a3      	str	r3, [r4, #8]
 800530e:	6963      	ldr	r3, [r4, #20]
 8005310:	425b      	negs	r3, r3
 8005312:	61a3      	str	r3, [r4, #24]
 8005314:	6923      	ldr	r3, [r4, #16]
 8005316:	b943      	cbnz	r3, 800532a <__swsetup_r+0xc6>
 8005318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800531c:	d1ba      	bne.n	8005294 <__swsetup_r+0x30>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	0781      	lsls	r1, r0, #30
 8005322:	bf58      	it	pl
 8005324:	6963      	ldrpl	r3, [r4, #20]
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	e7f4      	b.n	8005314 <__swsetup_r+0xb0>
 800532a:	2000      	movs	r0, #0
 800532c:	e7f7      	b.n	800531e <__swsetup_r+0xba>
 800532e:	bf00      	nop
 8005330:	2000000c 	.word	0x2000000c
 8005334:	080062ec 	.word	0x080062ec
 8005338:	0800630c 	.word	0x0800630c
 800533c:	080062cc 	.word	0x080062cc

08005340 <__assert_func>:
 8005340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005342:	4614      	mov	r4, r2
 8005344:	461a      	mov	r2, r3
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <__assert_func+0x2c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4605      	mov	r5, r0
 800534c:	68d8      	ldr	r0, [r3, #12]
 800534e:	b14c      	cbz	r4, 8005364 <__assert_func+0x24>
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <__assert_func+0x30>)
 8005352:	9100      	str	r1, [sp, #0]
 8005354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005358:	4906      	ldr	r1, [pc, #24]	; (8005374 <__assert_func+0x34>)
 800535a:	462b      	mov	r3, r5
 800535c:	f000 f9a6 	bl	80056ac <fiprintf>
 8005360:	f000 fe8c 	bl	800607c <abort>
 8005364:	4b04      	ldr	r3, [pc, #16]	; (8005378 <__assert_func+0x38>)
 8005366:	461c      	mov	r4, r3
 8005368:	e7f3      	b.n	8005352 <__assert_func+0x12>
 800536a:	bf00      	nop
 800536c:	2000000c 	.word	0x2000000c
 8005370:	0800628e 	.word	0x0800628e
 8005374:	0800629b 	.word	0x0800629b
 8005378:	080062c9 	.word	0x080062c9

0800537c <__sflush_r>:
 800537c:	898a      	ldrh	r2, [r1, #12]
 800537e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005382:	4605      	mov	r5, r0
 8005384:	0710      	lsls	r0, r2, #28
 8005386:	460c      	mov	r4, r1
 8005388:	d458      	bmi.n	800543c <__sflush_r+0xc0>
 800538a:	684b      	ldr	r3, [r1, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	dc05      	bgt.n	800539c <__sflush_r+0x20>
 8005390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	dc02      	bgt.n	800539c <__sflush_r+0x20>
 8005396:	2000      	movs	r0, #0
 8005398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800539c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800539e:	2e00      	cmp	r6, #0
 80053a0:	d0f9      	beq.n	8005396 <__sflush_r+0x1a>
 80053a2:	2300      	movs	r3, #0
 80053a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053a8:	682f      	ldr	r7, [r5, #0]
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	d032      	beq.n	8005414 <__sflush_r+0x98>
 80053ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	075a      	lsls	r2, r3, #29
 80053b4:	d505      	bpl.n	80053c2 <__sflush_r+0x46>
 80053b6:	6863      	ldr	r3, [r4, #4]
 80053b8:	1ac0      	subs	r0, r0, r3
 80053ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053bc:	b10b      	cbz	r3, 80053c2 <__sflush_r+0x46>
 80053be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c0:	1ac0      	subs	r0, r0, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	4602      	mov	r2, r0
 80053c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053c8:	6a21      	ldr	r1, [r4, #32]
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b0      	blx	r6
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	d106      	bne.n	80053e2 <__sflush_r+0x66>
 80053d4:	6829      	ldr	r1, [r5, #0]
 80053d6:	291d      	cmp	r1, #29
 80053d8:	d82c      	bhi.n	8005434 <__sflush_r+0xb8>
 80053da:	4a2a      	ldr	r2, [pc, #168]	; (8005484 <__sflush_r+0x108>)
 80053dc:	40ca      	lsrs	r2, r1
 80053de:	07d6      	lsls	r6, r2, #31
 80053e0:	d528      	bpl.n	8005434 <__sflush_r+0xb8>
 80053e2:	2200      	movs	r2, #0
 80053e4:	6062      	str	r2, [r4, #4]
 80053e6:	04d9      	lsls	r1, r3, #19
 80053e8:	6922      	ldr	r2, [r4, #16]
 80053ea:	6022      	str	r2, [r4, #0]
 80053ec:	d504      	bpl.n	80053f8 <__sflush_r+0x7c>
 80053ee:	1c42      	adds	r2, r0, #1
 80053f0:	d101      	bne.n	80053f6 <__sflush_r+0x7a>
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	b903      	cbnz	r3, 80053f8 <__sflush_r+0x7c>
 80053f6:	6560      	str	r0, [r4, #84]	; 0x54
 80053f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053fa:	602f      	str	r7, [r5, #0]
 80053fc:	2900      	cmp	r1, #0
 80053fe:	d0ca      	beq.n	8005396 <__sflush_r+0x1a>
 8005400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005404:	4299      	cmp	r1, r3
 8005406:	d002      	beq.n	800540e <__sflush_r+0x92>
 8005408:	4628      	mov	r0, r5
 800540a:	f000 fa03 	bl	8005814 <_free_r>
 800540e:	2000      	movs	r0, #0
 8005410:	6360      	str	r0, [r4, #52]	; 0x34
 8005412:	e7c1      	b.n	8005398 <__sflush_r+0x1c>
 8005414:	6a21      	ldr	r1, [r4, #32]
 8005416:	2301      	movs	r3, #1
 8005418:	4628      	mov	r0, r5
 800541a:	47b0      	blx	r6
 800541c:	1c41      	adds	r1, r0, #1
 800541e:	d1c7      	bne.n	80053b0 <__sflush_r+0x34>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0c4      	beq.n	80053b0 <__sflush_r+0x34>
 8005426:	2b1d      	cmp	r3, #29
 8005428:	d001      	beq.n	800542e <__sflush_r+0xb2>
 800542a:	2b16      	cmp	r3, #22
 800542c:	d101      	bne.n	8005432 <__sflush_r+0xb6>
 800542e:	602f      	str	r7, [r5, #0]
 8005430:	e7b1      	b.n	8005396 <__sflush_r+0x1a>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005438:	81a3      	strh	r3, [r4, #12]
 800543a:	e7ad      	b.n	8005398 <__sflush_r+0x1c>
 800543c:	690f      	ldr	r7, [r1, #16]
 800543e:	2f00      	cmp	r7, #0
 8005440:	d0a9      	beq.n	8005396 <__sflush_r+0x1a>
 8005442:	0793      	lsls	r3, r2, #30
 8005444:	680e      	ldr	r6, [r1, #0]
 8005446:	bf08      	it	eq
 8005448:	694b      	ldreq	r3, [r1, #20]
 800544a:	600f      	str	r7, [r1, #0]
 800544c:	bf18      	it	ne
 800544e:	2300      	movne	r3, #0
 8005450:	eba6 0807 	sub.w	r8, r6, r7
 8005454:	608b      	str	r3, [r1, #8]
 8005456:	f1b8 0f00 	cmp.w	r8, #0
 800545a:	dd9c      	ble.n	8005396 <__sflush_r+0x1a>
 800545c:	6a21      	ldr	r1, [r4, #32]
 800545e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005460:	4643      	mov	r3, r8
 8005462:	463a      	mov	r2, r7
 8005464:	4628      	mov	r0, r5
 8005466:	47b0      	blx	r6
 8005468:	2800      	cmp	r0, #0
 800546a:	dc06      	bgt.n	800547a <__sflush_r+0xfe>
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	e78e      	b.n	8005398 <__sflush_r+0x1c>
 800547a:	4407      	add	r7, r0
 800547c:	eba8 0800 	sub.w	r8, r8, r0
 8005480:	e7e9      	b.n	8005456 <__sflush_r+0xda>
 8005482:	bf00      	nop
 8005484:	20400001 	.word	0x20400001

08005488 <_fflush_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	4605      	mov	r5, r0
 800548e:	460c      	mov	r4, r1
 8005490:	b913      	cbnz	r3, 8005498 <_fflush_r+0x10>
 8005492:	2500      	movs	r5, #0
 8005494:	4628      	mov	r0, r5
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	b118      	cbz	r0, 80054a2 <_fflush_r+0x1a>
 800549a:	6983      	ldr	r3, [r0, #24]
 800549c:	b90b      	cbnz	r3, 80054a2 <_fflush_r+0x1a>
 800549e:	f000 f887 	bl	80055b0 <__sinit>
 80054a2:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <_fflush_r+0x6c>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	d11b      	bne.n	80054e0 <_fflush_r+0x58>
 80054a8:	686c      	ldr	r4, [r5, #4]
 80054aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ef      	beq.n	8005492 <_fflush_r+0xa>
 80054b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054b4:	07d0      	lsls	r0, r2, #31
 80054b6:	d404      	bmi.n	80054c2 <_fflush_r+0x3a>
 80054b8:	0599      	lsls	r1, r3, #22
 80054ba:	d402      	bmi.n	80054c2 <_fflush_r+0x3a>
 80054bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054be:	f000 f93a 	bl	8005736 <__retarget_lock_acquire_recursive>
 80054c2:	4628      	mov	r0, r5
 80054c4:	4621      	mov	r1, r4
 80054c6:	f7ff ff59 	bl	800537c <__sflush_r>
 80054ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054cc:	07da      	lsls	r2, r3, #31
 80054ce:	4605      	mov	r5, r0
 80054d0:	d4e0      	bmi.n	8005494 <_fflush_r+0xc>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	059b      	lsls	r3, r3, #22
 80054d6:	d4dd      	bmi.n	8005494 <_fflush_r+0xc>
 80054d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054da:	f000 f92d 	bl	8005738 <__retarget_lock_release_recursive>
 80054de:	e7d9      	b.n	8005494 <_fflush_r+0xc>
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <_fflush_r+0x70>)
 80054e2:	429c      	cmp	r4, r3
 80054e4:	d101      	bne.n	80054ea <_fflush_r+0x62>
 80054e6:	68ac      	ldr	r4, [r5, #8]
 80054e8:	e7df      	b.n	80054aa <_fflush_r+0x22>
 80054ea:	4b04      	ldr	r3, [pc, #16]	; (80054fc <_fflush_r+0x74>)
 80054ec:	429c      	cmp	r4, r3
 80054ee:	bf08      	it	eq
 80054f0:	68ec      	ldreq	r4, [r5, #12]
 80054f2:	e7da      	b.n	80054aa <_fflush_r+0x22>
 80054f4:	080062ec 	.word	0x080062ec
 80054f8:	0800630c 	.word	0x0800630c
 80054fc:	080062cc 	.word	0x080062cc

08005500 <std>:
 8005500:	2300      	movs	r3, #0
 8005502:	b510      	push	{r4, lr}
 8005504:	4604      	mov	r4, r0
 8005506:	e9c0 3300 	strd	r3, r3, [r0]
 800550a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800550e:	6083      	str	r3, [r0, #8]
 8005510:	8181      	strh	r1, [r0, #12]
 8005512:	6643      	str	r3, [r0, #100]	; 0x64
 8005514:	81c2      	strh	r2, [r0, #14]
 8005516:	6183      	str	r3, [r0, #24]
 8005518:	4619      	mov	r1, r3
 800551a:	2208      	movs	r2, #8
 800551c:	305c      	adds	r0, #92	; 0x5c
 800551e:	f7ff fdc1 	bl	80050a4 <memset>
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <std+0x38>)
 8005524:	6263      	str	r3, [r4, #36]	; 0x24
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <std+0x3c>)
 8005528:	62a3      	str	r3, [r4, #40]	; 0x28
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <std+0x40>)
 800552c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <std+0x44>)
 8005530:	6224      	str	r4, [r4, #32]
 8005532:	6323      	str	r3, [r4, #48]	; 0x30
 8005534:	bd10      	pop	{r4, pc}
 8005536:	bf00      	nop
 8005538:	08005fd1 	.word	0x08005fd1
 800553c:	08005ff3 	.word	0x08005ff3
 8005540:	0800602b 	.word	0x0800602b
 8005544:	0800604f 	.word	0x0800604f

08005548 <_cleanup_r>:
 8005548:	4901      	ldr	r1, [pc, #4]	; (8005550 <_cleanup_r+0x8>)
 800554a:	f000 b8c1 	b.w	80056d0 <_fwalk_reent>
 800554e:	bf00      	nop
 8005550:	08005489 	.word	0x08005489

08005554 <__sfmoreglue>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	2268      	movs	r2, #104	; 0x68
 8005558:	1e4d      	subs	r5, r1, #1
 800555a:	4355      	muls	r5, r2
 800555c:	460e      	mov	r6, r1
 800555e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005562:	f000 f9c3 	bl	80058ec <_malloc_r>
 8005566:	4604      	mov	r4, r0
 8005568:	b140      	cbz	r0, 800557c <__sfmoreglue+0x28>
 800556a:	2100      	movs	r1, #0
 800556c:	e9c0 1600 	strd	r1, r6, [r0]
 8005570:	300c      	adds	r0, #12
 8005572:	60a0      	str	r0, [r4, #8]
 8005574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005578:	f7ff fd94 	bl	80050a4 <memset>
 800557c:	4620      	mov	r0, r4
 800557e:	bd70      	pop	{r4, r5, r6, pc}

08005580 <__sfp_lock_acquire>:
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <__sfp_lock_acquire+0x8>)
 8005582:	f000 b8d8 	b.w	8005736 <__retarget_lock_acquire_recursive>
 8005586:	bf00      	nop
 8005588:	20010cb1 	.word	0x20010cb1

0800558c <__sfp_lock_release>:
 800558c:	4801      	ldr	r0, [pc, #4]	; (8005594 <__sfp_lock_release+0x8>)
 800558e:	f000 b8d3 	b.w	8005738 <__retarget_lock_release_recursive>
 8005592:	bf00      	nop
 8005594:	20010cb1 	.word	0x20010cb1

08005598 <__sinit_lock_acquire>:
 8005598:	4801      	ldr	r0, [pc, #4]	; (80055a0 <__sinit_lock_acquire+0x8>)
 800559a:	f000 b8cc 	b.w	8005736 <__retarget_lock_acquire_recursive>
 800559e:	bf00      	nop
 80055a0:	20010cb2 	.word	0x20010cb2

080055a4 <__sinit_lock_release>:
 80055a4:	4801      	ldr	r0, [pc, #4]	; (80055ac <__sinit_lock_release+0x8>)
 80055a6:	f000 b8c7 	b.w	8005738 <__retarget_lock_release_recursive>
 80055aa:	bf00      	nop
 80055ac:	20010cb2 	.word	0x20010cb2

080055b0 <__sinit>:
 80055b0:	b510      	push	{r4, lr}
 80055b2:	4604      	mov	r4, r0
 80055b4:	f7ff fff0 	bl	8005598 <__sinit_lock_acquire>
 80055b8:	69a3      	ldr	r3, [r4, #24]
 80055ba:	b11b      	cbz	r3, 80055c4 <__sinit+0x14>
 80055bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c0:	f7ff bff0 	b.w	80055a4 <__sinit_lock_release>
 80055c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055c8:	6523      	str	r3, [r4, #80]	; 0x50
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <__sinit+0x68>)
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <__sinit+0x6c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80055d2:	42a3      	cmp	r3, r4
 80055d4:	bf04      	itt	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	61a3      	streq	r3, [r4, #24]
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 f820 	bl	8005620 <__sfp>
 80055e0:	6060      	str	r0, [r4, #4]
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 f81c 	bl	8005620 <__sfp>
 80055e8:	60a0      	str	r0, [r4, #8]
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 f818 	bl	8005620 <__sfp>
 80055f0:	2200      	movs	r2, #0
 80055f2:	60e0      	str	r0, [r4, #12]
 80055f4:	2104      	movs	r1, #4
 80055f6:	6860      	ldr	r0, [r4, #4]
 80055f8:	f7ff ff82 	bl	8005500 <std>
 80055fc:	68a0      	ldr	r0, [r4, #8]
 80055fe:	2201      	movs	r2, #1
 8005600:	2109      	movs	r1, #9
 8005602:	f7ff ff7d 	bl	8005500 <std>
 8005606:	68e0      	ldr	r0, [r4, #12]
 8005608:	2202      	movs	r2, #2
 800560a:	2112      	movs	r1, #18
 800560c:	f7ff ff78 	bl	8005500 <std>
 8005610:	2301      	movs	r3, #1
 8005612:	61a3      	str	r3, [r4, #24]
 8005614:	e7d2      	b.n	80055bc <__sinit+0xc>
 8005616:	bf00      	nop
 8005618:	08006218 	.word	0x08006218
 800561c:	08005549 	.word	0x08005549

08005620 <__sfp>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	4607      	mov	r7, r0
 8005624:	f7ff ffac 	bl	8005580 <__sfp_lock_acquire>
 8005628:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <__sfp+0x84>)
 800562a:	681e      	ldr	r6, [r3, #0]
 800562c:	69b3      	ldr	r3, [r6, #24]
 800562e:	b913      	cbnz	r3, 8005636 <__sfp+0x16>
 8005630:	4630      	mov	r0, r6
 8005632:	f7ff ffbd 	bl	80055b0 <__sinit>
 8005636:	3648      	adds	r6, #72	; 0x48
 8005638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800563c:	3b01      	subs	r3, #1
 800563e:	d503      	bpl.n	8005648 <__sfp+0x28>
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	b30b      	cbz	r3, 8005688 <__sfp+0x68>
 8005644:	6836      	ldr	r6, [r6, #0]
 8005646:	e7f7      	b.n	8005638 <__sfp+0x18>
 8005648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800564c:	b9d5      	cbnz	r5, 8005684 <__sfp+0x64>
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <__sfp+0x88>)
 8005650:	60e3      	str	r3, [r4, #12]
 8005652:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005656:	6665      	str	r5, [r4, #100]	; 0x64
 8005658:	f000 f86c 	bl	8005734 <__retarget_lock_init_recursive>
 800565c:	f7ff ff96 	bl	800558c <__sfp_lock_release>
 8005660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005668:	6025      	str	r5, [r4, #0]
 800566a:	61a5      	str	r5, [r4, #24]
 800566c:	2208      	movs	r2, #8
 800566e:	4629      	mov	r1, r5
 8005670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005674:	f7ff fd16 	bl	80050a4 <memset>
 8005678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800567c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005680:	4620      	mov	r0, r4
 8005682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005684:	3468      	adds	r4, #104	; 0x68
 8005686:	e7d9      	b.n	800563c <__sfp+0x1c>
 8005688:	2104      	movs	r1, #4
 800568a:	4638      	mov	r0, r7
 800568c:	f7ff ff62 	bl	8005554 <__sfmoreglue>
 8005690:	4604      	mov	r4, r0
 8005692:	6030      	str	r0, [r6, #0]
 8005694:	2800      	cmp	r0, #0
 8005696:	d1d5      	bne.n	8005644 <__sfp+0x24>
 8005698:	f7ff ff78 	bl	800558c <__sfp_lock_release>
 800569c:	230c      	movs	r3, #12
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	e7ee      	b.n	8005680 <__sfp+0x60>
 80056a2:	bf00      	nop
 80056a4:	08006218 	.word	0x08006218
 80056a8:	ffff0001 	.word	0xffff0001

080056ac <fiprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	b503      	push	{r0, r1, lr}
 80056b0:	4601      	mov	r1, r0
 80056b2:	ab03      	add	r3, sp, #12
 80056b4:	4805      	ldr	r0, [pc, #20]	; (80056cc <fiprintf+0x20>)
 80056b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	f000 f9b3 	bl	8005a28 <_vfiprintf_r>
 80056c2:	b002      	add	sp, #8
 80056c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c8:	b003      	add	sp, #12
 80056ca:	4770      	bx	lr
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <_fwalk_reent>:
 80056d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d4:	4606      	mov	r6, r0
 80056d6:	4688      	mov	r8, r1
 80056d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056dc:	2700      	movs	r7, #0
 80056de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056e2:	f1b9 0901 	subs.w	r9, r9, #1
 80056e6:	d505      	bpl.n	80056f4 <_fwalk_reent+0x24>
 80056e8:	6824      	ldr	r4, [r4, #0]
 80056ea:	2c00      	cmp	r4, #0
 80056ec:	d1f7      	bne.n	80056de <_fwalk_reent+0xe>
 80056ee:	4638      	mov	r0, r7
 80056f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f4:	89ab      	ldrh	r3, [r5, #12]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d907      	bls.n	800570a <_fwalk_reent+0x3a>
 80056fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056fe:	3301      	adds	r3, #1
 8005700:	d003      	beq.n	800570a <_fwalk_reent+0x3a>
 8005702:	4629      	mov	r1, r5
 8005704:	4630      	mov	r0, r6
 8005706:	47c0      	blx	r8
 8005708:	4307      	orrs	r7, r0
 800570a:	3568      	adds	r5, #104	; 0x68
 800570c:	e7e9      	b.n	80056e2 <_fwalk_reent+0x12>
	...

08005710 <_gettimeofday_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d07      	ldr	r5, [pc, #28]	; (8005730 <_gettimeofday_r+0x20>)
 8005714:	2300      	movs	r3, #0
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	f000 fd5b 	bl	80061d8 <_gettimeofday>
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d102      	bne.n	800572c <_gettimeofday_r+0x1c>
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	b103      	cbz	r3, 800572c <_gettimeofday_r+0x1c>
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	bd38      	pop	{r3, r4, r5, pc}
 800572e:	bf00      	nop
 8005730:	20010cbc 	.word	0x20010cbc

08005734 <__retarget_lock_init_recursive>:
 8005734:	4770      	bx	lr

08005736 <__retarget_lock_acquire_recursive>:
 8005736:	4770      	bx	lr

08005738 <__retarget_lock_release_recursive>:
 8005738:	4770      	bx	lr

0800573a <__swhatbuf_r>:
 800573a:	b570      	push	{r4, r5, r6, lr}
 800573c:	460e      	mov	r6, r1
 800573e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005742:	2900      	cmp	r1, #0
 8005744:	b096      	sub	sp, #88	; 0x58
 8005746:	4614      	mov	r4, r2
 8005748:	461d      	mov	r5, r3
 800574a:	da08      	bge.n	800575e <__swhatbuf_r+0x24>
 800574c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	602a      	str	r2, [r5, #0]
 8005754:	061a      	lsls	r2, r3, #24
 8005756:	d410      	bmi.n	800577a <__swhatbuf_r+0x40>
 8005758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800575c:	e00e      	b.n	800577c <__swhatbuf_r+0x42>
 800575e:	466a      	mov	r2, sp
 8005760:	f000 fca4 	bl	80060ac <_fstat_r>
 8005764:	2800      	cmp	r0, #0
 8005766:	dbf1      	blt.n	800574c <__swhatbuf_r+0x12>
 8005768:	9a01      	ldr	r2, [sp, #4]
 800576a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800576e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005772:	425a      	negs	r2, r3
 8005774:	415a      	adcs	r2, r3
 8005776:	602a      	str	r2, [r5, #0]
 8005778:	e7ee      	b.n	8005758 <__swhatbuf_r+0x1e>
 800577a:	2340      	movs	r3, #64	; 0x40
 800577c:	2000      	movs	r0, #0
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	b016      	add	sp, #88	; 0x58
 8005782:	bd70      	pop	{r4, r5, r6, pc}

08005784 <__smakebuf_r>:
 8005784:	898b      	ldrh	r3, [r1, #12]
 8005786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005788:	079d      	lsls	r5, r3, #30
 800578a:	4606      	mov	r6, r0
 800578c:	460c      	mov	r4, r1
 800578e:	d507      	bpl.n	80057a0 <__smakebuf_r+0x1c>
 8005790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	2301      	movs	r3, #1
 800579a:	6163      	str	r3, [r4, #20]
 800579c:	b002      	add	sp, #8
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	ab01      	add	r3, sp, #4
 80057a2:	466a      	mov	r2, sp
 80057a4:	f7ff ffc9 	bl	800573a <__swhatbuf_r>
 80057a8:	9900      	ldr	r1, [sp, #0]
 80057aa:	4605      	mov	r5, r0
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 f89d 	bl	80058ec <_malloc_r>
 80057b2:	b948      	cbnz	r0, 80057c8 <__smakebuf_r+0x44>
 80057b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b8:	059a      	lsls	r2, r3, #22
 80057ba:	d4ef      	bmi.n	800579c <__smakebuf_r+0x18>
 80057bc:	f023 0303 	bic.w	r3, r3, #3
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	81a3      	strh	r3, [r4, #12]
 80057c6:	e7e3      	b.n	8005790 <__smakebuf_r+0xc>
 80057c8:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <__smakebuf_r+0x7c>)
 80057ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	6020      	str	r0, [r4, #0]
 80057d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	9b00      	ldr	r3, [sp, #0]
 80057d8:	6163      	str	r3, [r4, #20]
 80057da:	9b01      	ldr	r3, [sp, #4]
 80057dc:	6120      	str	r0, [r4, #16]
 80057de:	b15b      	cbz	r3, 80057f8 <__smakebuf_r+0x74>
 80057e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057e4:	4630      	mov	r0, r6
 80057e6:	f000 fc73 	bl	80060d0 <_isatty_r>
 80057ea:	b128      	cbz	r0, 80057f8 <__smakebuf_r+0x74>
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	89a0      	ldrh	r0, [r4, #12]
 80057fa:	4305      	orrs	r5, r0
 80057fc:	81a5      	strh	r5, [r4, #12]
 80057fe:	e7cd      	b.n	800579c <__smakebuf_r+0x18>
 8005800:	08005549 	.word	0x08005549

08005804 <malloc>:
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <malloc+0xc>)
 8005806:	4601      	mov	r1, r0
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	f000 b86f 	b.w	80058ec <_malloc_r>
 800580e:	bf00      	nop
 8005810:	2000000c 	.word	0x2000000c

08005814 <_free_r>:
 8005814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005816:	2900      	cmp	r1, #0
 8005818:	d044      	beq.n	80058a4 <_free_r+0x90>
 800581a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800581e:	9001      	str	r0, [sp, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f1a1 0404 	sub.w	r4, r1, #4
 8005826:	bfb8      	it	lt
 8005828:	18e4      	addlt	r4, r4, r3
 800582a:	f000 fc73 	bl	8006114 <__malloc_lock>
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <_free_r+0x94>)
 8005830:	9801      	ldr	r0, [sp, #4]
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	b933      	cbnz	r3, 8005844 <_free_r+0x30>
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	6014      	str	r4, [r2, #0]
 800583a:	b003      	add	sp, #12
 800583c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005840:	f000 bc6e 	b.w	8006120 <__malloc_unlock>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d908      	bls.n	800585a <_free_r+0x46>
 8005848:	6825      	ldr	r5, [r4, #0]
 800584a:	1961      	adds	r1, r4, r5
 800584c:	428b      	cmp	r3, r1
 800584e:	bf01      	itttt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	1949      	addeq	r1, r1, r5
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	e7ed      	b.n	8005836 <_free_r+0x22>
 800585a:	461a      	mov	r2, r3
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	b10b      	cbz	r3, 8005864 <_free_r+0x50>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x46>
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	1855      	adds	r5, r2, r1
 8005868:	42a5      	cmp	r5, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x70>
 800586c:	6824      	ldr	r4, [r4, #0]
 800586e:	4421      	add	r1, r4
 8005870:	1854      	adds	r4, r2, r1
 8005872:	42a3      	cmp	r3, r4
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	d1e0      	bne.n	800583a <_free_r+0x26>
 8005878:	681c      	ldr	r4, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6053      	str	r3, [r2, #4]
 800587e:	4421      	add	r1, r4
 8005880:	6011      	str	r1, [r2, #0]
 8005882:	e7da      	b.n	800583a <_free_r+0x26>
 8005884:	d902      	bls.n	800588c <_free_r+0x78>
 8005886:	230c      	movs	r3, #12
 8005888:	6003      	str	r3, [r0, #0]
 800588a:	e7d6      	b.n	800583a <_free_r+0x26>
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	1961      	adds	r1, r4, r5
 8005890:	428b      	cmp	r3, r1
 8005892:	bf04      	itt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1949      	addeq	r1, r1, r5
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	6054      	str	r4, [r2, #4]
 80058a2:	e7ca      	b.n	800583a <_free_r+0x26>
 80058a4:	b003      	add	sp, #12
 80058a6:	bd30      	pop	{r4, r5, pc}
 80058a8:	20010cb4 	.word	0x20010cb4

080058ac <sbrk_aligned>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4e0e      	ldr	r6, [pc, #56]	; (80058e8 <sbrk_aligned+0x3c>)
 80058b0:	460c      	mov	r4, r1
 80058b2:	6831      	ldr	r1, [r6, #0]
 80058b4:	4605      	mov	r5, r0
 80058b6:	b911      	cbnz	r1, 80058be <sbrk_aligned+0x12>
 80058b8:	f000 fb7a 	bl	8005fb0 <_sbrk_r>
 80058bc:	6030      	str	r0, [r6, #0]
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 fb75 	bl	8005fb0 <_sbrk_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	d00a      	beq.n	80058e0 <sbrk_aligned+0x34>
 80058ca:	1cc4      	adds	r4, r0, #3
 80058cc:	f024 0403 	bic.w	r4, r4, #3
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d007      	beq.n	80058e4 <sbrk_aligned+0x38>
 80058d4:	1a21      	subs	r1, r4, r0
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fb6a 	bl	8005fb0 <_sbrk_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d101      	bne.n	80058e4 <sbrk_aligned+0x38>
 80058e0:	f04f 34ff 	mov.w	r4, #4294967295
 80058e4:	4620      	mov	r0, r4
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	20010cb8 	.word	0x20010cb8

080058ec <_malloc_r>:
 80058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f0:	1ccd      	adds	r5, r1, #3
 80058f2:	f025 0503 	bic.w	r5, r5, #3
 80058f6:	3508      	adds	r5, #8
 80058f8:	2d0c      	cmp	r5, #12
 80058fa:	bf38      	it	cc
 80058fc:	250c      	movcc	r5, #12
 80058fe:	2d00      	cmp	r5, #0
 8005900:	4607      	mov	r7, r0
 8005902:	db01      	blt.n	8005908 <_malloc_r+0x1c>
 8005904:	42a9      	cmp	r1, r5
 8005906:	d905      	bls.n	8005914 <_malloc_r+0x28>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	2600      	movs	r6, #0
 800590e:	4630      	mov	r0, r6
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005914:	4e2e      	ldr	r6, [pc, #184]	; (80059d0 <_malloc_r+0xe4>)
 8005916:	f000 fbfd 	bl	8006114 <__malloc_lock>
 800591a:	6833      	ldr	r3, [r6, #0]
 800591c:	461c      	mov	r4, r3
 800591e:	bb34      	cbnz	r4, 800596e <_malloc_r+0x82>
 8005920:	4629      	mov	r1, r5
 8005922:	4638      	mov	r0, r7
 8005924:	f7ff ffc2 	bl	80058ac <sbrk_aligned>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	4604      	mov	r4, r0
 800592c:	d14d      	bne.n	80059ca <_malloc_r+0xde>
 800592e:	6834      	ldr	r4, [r6, #0]
 8005930:	4626      	mov	r6, r4
 8005932:	2e00      	cmp	r6, #0
 8005934:	d140      	bne.n	80059b8 <_malloc_r+0xcc>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	4631      	mov	r1, r6
 800593a:	4638      	mov	r0, r7
 800593c:	eb04 0803 	add.w	r8, r4, r3
 8005940:	f000 fb36 	bl	8005fb0 <_sbrk_r>
 8005944:	4580      	cmp	r8, r0
 8005946:	d13a      	bne.n	80059be <_malloc_r+0xd2>
 8005948:	6821      	ldr	r1, [r4, #0]
 800594a:	3503      	adds	r5, #3
 800594c:	1a6d      	subs	r5, r5, r1
 800594e:	f025 0503 	bic.w	r5, r5, #3
 8005952:	3508      	adds	r5, #8
 8005954:	2d0c      	cmp	r5, #12
 8005956:	bf38      	it	cc
 8005958:	250c      	movcc	r5, #12
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ffa5 	bl	80058ac <sbrk_aligned>
 8005962:	3001      	adds	r0, #1
 8005964:	d02b      	beq.n	80059be <_malloc_r+0xd2>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	442b      	add	r3, r5
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	e00e      	b.n	800598c <_malloc_r+0xa0>
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	1b52      	subs	r2, r2, r5
 8005972:	d41e      	bmi.n	80059b2 <_malloc_r+0xc6>
 8005974:	2a0b      	cmp	r2, #11
 8005976:	d916      	bls.n	80059a6 <_malloc_r+0xba>
 8005978:	1961      	adds	r1, r4, r5
 800597a:	42a3      	cmp	r3, r4
 800597c:	6025      	str	r5, [r4, #0]
 800597e:	bf18      	it	ne
 8005980:	6059      	strne	r1, [r3, #4]
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	bf08      	it	eq
 8005986:	6031      	streq	r1, [r6, #0]
 8005988:	5162      	str	r2, [r4, r5]
 800598a:	604b      	str	r3, [r1, #4]
 800598c:	4638      	mov	r0, r7
 800598e:	f104 060b 	add.w	r6, r4, #11
 8005992:	f000 fbc5 	bl	8006120 <__malloc_unlock>
 8005996:	f026 0607 	bic.w	r6, r6, #7
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	1af2      	subs	r2, r6, r3
 800599e:	d0b6      	beq.n	800590e <_malloc_r+0x22>
 80059a0:	1b9b      	subs	r3, r3, r6
 80059a2:	50a3      	str	r3, [r4, r2]
 80059a4:	e7b3      	b.n	800590e <_malloc_r+0x22>
 80059a6:	6862      	ldr	r2, [r4, #4]
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	bf0c      	ite	eq
 80059ac:	6032      	streq	r2, [r6, #0]
 80059ae:	605a      	strne	r2, [r3, #4]
 80059b0:	e7ec      	b.n	800598c <_malloc_r+0xa0>
 80059b2:	4623      	mov	r3, r4
 80059b4:	6864      	ldr	r4, [r4, #4]
 80059b6:	e7b2      	b.n	800591e <_malloc_r+0x32>
 80059b8:	4634      	mov	r4, r6
 80059ba:	6876      	ldr	r6, [r6, #4]
 80059bc:	e7b9      	b.n	8005932 <_malloc_r+0x46>
 80059be:	230c      	movs	r3, #12
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4638      	mov	r0, r7
 80059c4:	f000 fbac 	bl	8006120 <__malloc_unlock>
 80059c8:	e7a1      	b.n	800590e <_malloc_r+0x22>
 80059ca:	6025      	str	r5, [r4, #0]
 80059cc:	e7de      	b.n	800598c <_malloc_r+0xa0>
 80059ce:	bf00      	nop
 80059d0:	20010cb4 	.word	0x20010cb4

080059d4 <__sfputc_r>:
 80059d4:	6893      	ldr	r3, [r2, #8]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	b410      	push	{r4}
 80059dc:	6093      	str	r3, [r2, #8]
 80059de:	da08      	bge.n	80059f2 <__sfputc_r+0x1e>
 80059e0:	6994      	ldr	r4, [r2, #24]
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	db01      	blt.n	80059ea <__sfputc_r+0x16>
 80059e6:	290a      	cmp	r1, #10
 80059e8:	d103      	bne.n	80059f2 <__sfputc_r+0x1e>
 80059ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ee:	f7ff bbe7 	b.w	80051c0 <__swbuf_r>
 80059f2:	6813      	ldr	r3, [r2, #0]
 80059f4:	1c58      	adds	r0, r3, #1
 80059f6:	6010      	str	r0, [r2, #0]
 80059f8:	7019      	strb	r1, [r3, #0]
 80059fa:	4608      	mov	r0, r1
 80059fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <__sfputs_r>:
 8005a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	18d5      	adds	r5, r2, r3
 8005a0c:	42ac      	cmp	r4, r5
 8005a0e:	d101      	bne.n	8005a14 <__sfputs_r+0x12>
 8005a10:	2000      	movs	r0, #0
 8005a12:	e007      	b.n	8005a24 <__sfputs_r+0x22>
 8005a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a18:	463a      	mov	r2, r7
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ffda 	bl	80059d4 <__sfputc_r>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d1f3      	bne.n	8005a0c <__sfputs_r+0xa>
 8005a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a28 <_vfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	460d      	mov	r5, r1
 8005a2e:	b09d      	sub	sp, #116	; 0x74
 8005a30:	4614      	mov	r4, r2
 8005a32:	4698      	mov	r8, r3
 8005a34:	4606      	mov	r6, r0
 8005a36:	b118      	cbz	r0, 8005a40 <_vfiprintf_r+0x18>
 8005a38:	6983      	ldr	r3, [r0, #24]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <_vfiprintf_r+0x18>
 8005a3c:	f7ff fdb8 	bl	80055b0 <__sinit>
 8005a40:	4b89      	ldr	r3, [pc, #548]	; (8005c68 <_vfiprintf_r+0x240>)
 8005a42:	429d      	cmp	r5, r3
 8005a44:	d11b      	bne.n	8005a7e <_vfiprintf_r+0x56>
 8005a46:	6875      	ldr	r5, [r6, #4]
 8005a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a4a:	07d9      	lsls	r1, r3, #31
 8005a4c:	d405      	bmi.n	8005a5a <_vfiprintf_r+0x32>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	059a      	lsls	r2, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <_vfiprintf_r+0x32>
 8005a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a56:	f7ff fe6e 	bl	8005736 <__retarget_lock_acquire_recursive>
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	071b      	lsls	r3, r3, #28
 8005a5e:	d501      	bpl.n	8005a64 <_vfiprintf_r+0x3c>
 8005a60:	692b      	ldr	r3, [r5, #16]
 8005a62:	b9eb      	cbnz	r3, 8005aa0 <_vfiprintf_r+0x78>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff fbfc 	bl	8005264 <__swsetup_r>
 8005a6c:	b1c0      	cbz	r0, 8005aa0 <_vfiprintf_r+0x78>
 8005a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a70:	07dc      	lsls	r4, r3, #31
 8005a72:	d50e      	bpl.n	8005a92 <_vfiprintf_r+0x6a>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	b01d      	add	sp, #116	; 0x74
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <_vfiprintf_r+0x244>)
 8005a80:	429d      	cmp	r5, r3
 8005a82:	d101      	bne.n	8005a88 <_vfiprintf_r+0x60>
 8005a84:	68b5      	ldr	r5, [r6, #8]
 8005a86:	e7df      	b.n	8005a48 <_vfiprintf_r+0x20>
 8005a88:	4b79      	ldr	r3, [pc, #484]	; (8005c70 <_vfiprintf_r+0x248>)
 8005a8a:	429d      	cmp	r5, r3
 8005a8c:	bf08      	it	eq
 8005a8e:	68f5      	ldreq	r5, [r6, #12]
 8005a90:	e7da      	b.n	8005a48 <_vfiprintf_r+0x20>
 8005a92:	89ab      	ldrh	r3, [r5, #12]
 8005a94:	0598      	lsls	r0, r3, #22
 8005a96:	d4ed      	bmi.n	8005a74 <_vfiprintf_r+0x4c>
 8005a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a9a:	f7ff fe4d 	bl	8005738 <__retarget_lock_release_recursive>
 8005a9e:	e7e9      	b.n	8005a74 <_vfiprintf_r+0x4c>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa4:	2320      	movs	r3, #32
 8005aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aae:	2330      	movs	r3, #48	; 0x30
 8005ab0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c74 <_vfiprintf_r+0x24c>
 8005ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ab8:	f04f 0901 	mov.w	r9, #1
 8005abc:	4623      	mov	r3, r4
 8005abe:	469a      	mov	sl, r3
 8005ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac4:	b10a      	cbz	r2, 8005aca <_vfiprintf_r+0xa2>
 8005ac6:	2a25      	cmp	r2, #37	; 0x25
 8005ac8:	d1f9      	bne.n	8005abe <_vfiprintf_r+0x96>
 8005aca:	ebba 0b04 	subs.w	fp, sl, r4
 8005ace:	d00b      	beq.n	8005ae8 <_vfiprintf_r+0xc0>
 8005ad0:	465b      	mov	r3, fp
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f7ff ff93 	bl	8005a02 <__sfputs_r>
 8005adc:	3001      	adds	r0, #1
 8005ade:	f000 80aa 	beq.w	8005c36 <_vfiprintf_r+0x20e>
 8005ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae4:	445a      	add	r2, fp
 8005ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80a2 	beq.w	8005c36 <_vfiprintf_r+0x20e>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295
 8005af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005afc:	f10a 0a01 	add.w	sl, sl, #1
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	9307      	str	r3, [sp, #28]
 8005b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b08:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0a:	4654      	mov	r4, sl
 8005b0c:	2205      	movs	r2, #5
 8005b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b12:	4858      	ldr	r0, [pc, #352]	; (8005c74 <_vfiprintf_r+0x24c>)
 8005b14:	f7fa fb94 	bl	8000240 <memchr>
 8005b18:	9a04      	ldr	r2, [sp, #16]
 8005b1a:	b9d8      	cbnz	r0, 8005b54 <_vfiprintf_r+0x12c>
 8005b1c:	06d1      	lsls	r1, r2, #27
 8005b1e:	bf44      	itt	mi
 8005b20:	2320      	movmi	r3, #32
 8005b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b26:	0713      	lsls	r3, r2, #28
 8005b28:	bf44      	itt	mi
 8005b2a:	232b      	movmi	r3, #43	; 0x2b
 8005b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b30:	f89a 3000 	ldrb.w	r3, [sl]
 8005b34:	2b2a      	cmp	r3, #42	; 0x2a
 8005b36:	d015      	beq.n	8005b64 <_vfiprintf_r+0x13c>
 8005b38:	9a07      	ldr	r2, [sp, #28]
 8005b3a:	4654      	mov	r4, sl
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f04f 0c0a 	mov.w	ip, #10
 8005b42:	4621      	mov	r1, r4
 8005b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b48:	3b30      	subs	r3, #48	; 0x30
 8005b4a:	2b09      	cmp	r3, #9
 8005b4c:	d94e      	bls.n	8005bec <_vfiprintf_r+0x1c4>
 8005b4e:	b1b0      	cbz	r0, 8005b7e <_vfiprintf_r+0x156>
 8005b50:	9207      	str	r2, [sp, #28]
 8005b52:	e014      	b.n	8005b7e <_vfiprintf_r+0x156>
 8005b54:	eba0 0308 	sub.w	r3, r0, r8
 8005b58:	fa09 f303 	lsl.w	r3, r9, r3
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	46a2      	mov	sl, r4
 8005b62:	e7d2      	b.n	8005b0a <_vfiprintf_r+0xe2>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	1d19      	adds	r1, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	9103      	str	r1, [sp, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfbb      	ittet	lt
 8005b70:	425b      	neglt	r3, r3
 8005b72:	f042 0202 	orrlt.w	r2, r2, #2
 8005b76:	9307      	strge	r3, [sp, #28]
 8005b78:	9307      	strlt	r3, [sp, #28]
 8005b7a:	bfb8      	it	lt
 8005b7c:	9204      	strlt	r2, [sp, #16]
 8005b7e:	7823      	ldrb	r3, [r4, #0]
 8005b80:	2b2e      	cmp	r3, #46	; 0x2e
 8005b82:	d10c      	bne.n	8005b9e <_vfiprintf_r+0x176>
 8005b84:	7863      	ldrb	r3, [r4, #1]
 8005b86:	2b2a      	cmp	r3, #42	; 0x2a
 8005b88:	d135      	bne.n	8005bf6 <_vfiprintf_r+0x1ce>
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	9203      	str	r2, [sp, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bfb8      	it	lt
 8005b96:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b9a:	3402      	adds	r4, #2
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c84 <_vfiprintf_r+0x25c>
 8005ba2:	7821      	ldrb	r1, [r4, #0]
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	4650      	mov	r0, sl
 8005ba8:	f7fa fb4a 	bl	8000240 <memchr>
 8005bac:	b140      	cbz	r0, 8005bc0 <_vfiprintf_r+0x198>
 8005bae:	2340      	movs	r3, #64	; 0x40
 8005bb0:	eba0 000a 	sub.w	r0, r0, sl
 8005bb4:	fa03 f000 	lsl.w	r0, r3, r0
 8005bb8:	9b04      	ldr	r3, [sp, #16]
 8005bba:	4303      	orrs	r3, r0
 8005bbc:	3401      	adds	r4, #1
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc4:	482c      	ldr	r0, [pc, #176]	; (8005c78 <_vfiprintf_r+0x250>)
 8005bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bca:	2206      	movs	r2, #6
 8005bcc:	f7fa fb38 	bl	8000240 <memchr>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d03f      	beq.n	8005c54 <_vfiprintf_r+0x22c>
 8005bd4:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <_vfiprintf_r+0x254>)
 8005bd6:	bb1b      	cbnz	r3, 8005c20 <_vfiprintf_r+0x1f8>
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	3307      	adds	r3, #7
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	3308      	adds	r3, #8
 8005be2:	9303      	str	r3, [sp, #12]
 8005be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be6:	443b      	add	r3, r7
 8005be8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bea:	e767      	b.n	8005abc <_vfiprintf_r+0x94>
 8005bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	e7a5      	b.n	8005b42 <_vfiprintf_r+0x11a>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	3401      	adds	r4, #1
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f04f 0c0a 	mov.w	ip, #10
 8005c02:	4620      	mov	r0, r4
 8005c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c08:	3a30      	subs	r2, #48	; 0x30
 8005c0a:	2a09      	cmp	r2, #9
 8005c0c:	d903      	bls.n	8005c16 <_vfiprintf_r+0x1ee>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c5      	beq.n	8005b9e <_vfiprintf_r+0x176>
 8005c12:	9105      	str	r1, [sp, #20]
 8005c14:	e7c3      	b.n	8005b9e <_vfiprintf_r+0x176>
 8005c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e7f0      	b.n	8005c02 <_vfiprintf_r+0x1da>
 8005c20:	ab03      	add	r3, sp, #12
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	462a      	mov	r2, r5
 8005c26:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <_vfiprintf_r+0x258>)
 8005c28:	a904      	add	r1, sp, #16
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f3af 8000 	nop.w
 8005c30:	4607      	mov	r7, r0
 8005c32:	1c78      	adds	r0, r7, #1
 8005c34:	d1d6      	bne.n	8005be4 <_vfiprintf_r+0x1bc>
 8005c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c38:	07d9      	lsls	r1, r3, #31
 8005c3a:	d405      	bmi.n	8005c48 <_vfiprintf_r+0x220>
 8005c3c:	89ab      	ldrh	r3, [r5, #12]
 8005c3e:	059a      	lsls	r2, r3, #22
 8005c40:	d402      	bmi.n	8005c48 <_vfiprintf_r+0x220>
 8005c42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c44:	f7ff fd78 	bl	8005738 <__retarget_lock_release_recursive>
 8005c48:	89ab      	ldrh	r3, [r5, #12]
 8005c4a:	065b      	lsls	r3, r3, #25
 8005c4c:	f53f af12 	bmi.w	8005a74 <_vfiprintf_r+0x4c>
 8005c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c52:	e711      	b.n	8005a78 <_vfiprintf_r+0x50>
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	462a      	mov	r2, r5
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <_vfiprintf_r+0x258>)
 8005c5c:	a904      	add	r1, sp, #16
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f000 f880 	bl	8005d64 <_printf_i>
 8005c64:	e7e4      	b.n	8005c30 <_vfiprintf_r+0x208>
 8005c66:	bf00      	nop
 8005c68:	080062ec 	.word	0x080062ec
 8005c6c:	0800630c 	.word	0x0800630c
 8005c70:	080062cc 	.word	0x080062cc
 8005c74:	0800632c 	.word	0x0800632c
 8005c78:	08006336 	.word	0x08006336
 8005c7c:	00000000 	.word	0x00000000
 8005c80:	08005a03 	.word	0x08005a03
 8005c84:	08006332 	.word	0x08006332

08005c88 <_printf_common>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	4699      	mov	r9, r3
 8005c90:	688a      	ldr	r2, [r1, #8]
 8005c92:	690b      	ldr	r3, [r1, #16]
 8005c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bfb8      	it	lt
 8005c9c:	4613      	movlt	r3, r2
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	b10a      	cbz	r2, 8005cae <_printf_common+0x26>
 8005caa:	3301      	adds	r3, #1
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	0699      	lsls	r1, r3, #26
 8005cb2:	bf42      	ittt	mi
 8005cb4:	6833      	ldrmi	r3, [r6, #0]
 8005cb6:	3302      	addmi	r3, #2
 8005cb8:	6033      	strmi	r3, [r6, #0]
 8005cba:	6825      	ldr	r5, [r4, #0]
 8005cbc:	f015 0506 	ands.w	r5, r5, #6
 8005cc0:	d106      	bne.n	8005cd0 <_printf_common+0x48>
 8005cc2:	f104 0a19 	add.w	sl, r4, #25
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	6832      	ldr	r2, [r6, #0]
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dc26      	bgt.n	8005d1e <_printf_common+0x96>
 8005cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd4:	1e13      	subs	r3, r2, #0
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	bf18      	it	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	0692      	lsls	r2, r2, #26
 8005cde:	d42b      	bmi.n	8005d38 <_printf_common+0xb0>
 8005ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c0      	blx	r8
 8005cea:	3001      	adds	r0, #1
 8005cec:	d01e      	beq.n	8005d2c <_printf_common+0xa4>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	68e5      	ldr	r5, [r4, #12]
 8005cf2:	6832      	ldr	r2, [r6, #0]
 8005cf4:	f003 0306 	and.w	r3, r3, #6
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	bf08      	it	eq
 8005cfc:	1aad      	subeq	r5, r5, r2
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	6922      	ldr	r2, [r4, #16]
 8005d02:	bf0c      	ite	eq
 8005d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d08:	2500      	movne	r5, #0
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	bfc4      	itt	gt
 8005d0e:	1a9b      	subgt	r3, r3, r2
 8005d10:	18ed      	addgt	r5, r5, r3
 8005d12:	2600      	movs	r6, #0
 8005d14:	341a      	adds	r4, #26
 8005d16:	42b5      	cmp	r5, r6
 8005d18:	d11a      	bne.n	8005d50 <_printf_common+0xc8>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e008      	b.n	8005d30 <_printf_common+0xa8>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4652      	mov	r2, sl
 8005d22:	4649      	mov	r1, r9
 8005d24:	4638      	mov	r0, r7
 8005d26:	47c0      	blx	r8
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d103      	bne.n	8005d34 <_printf_common+0xac>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d34:	3501      	adds	r5, #1
 8005d36:	e7c6      	b.n	8005cc6 <_printf_common+0x3e>
 8005d38:	18e1      	adds	r1, r4, r3
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	2030      	movs	r0, #48	; 0x30
 8005d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d42:	4422      	add	r2, r4
 8005d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	e7c7      	b.n	8005ce0 <_printf_common+0x58>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4622      	mov	r2, r4
 8005d54:	4649      	mov	r1, r9
 8005d56:	4638      	mov	r0, r7
 8005d58:	47c0      	blx	r8
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d0e6      	beq.n	8005d2c <_printf_common+0xa4>
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7d9      	b.n	8005d16 <_printf_common+0x8e>
	...

08005d64 <_printf_i>:
 8005d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	7e0f      	ldrb	r7, [r1, #24]
 8005d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d6c:	2f78      	cmp	r7, #120	; 0x78
 8005d6e:	4691      	mov	r9, r2
 8005d70:	4680      	mov	r8, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	469a      	mov	sl, r3
 8005d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d7a:	d807      	bhi.n	8005d8c <_printf_i+0x28>
 8005d7c:	2f62      	cmp	r7, #98	; 0x62
 8005d7e:	d80a      	bhi.n	8005d96 <_printf_i+0x32>
 8005d80:	2f00      	cmp	r7, #0
 8005d82:	f000 80d8 	beq.w	8005f36 <_printf_i+0x1d2>
 8005d86:	2f58      	cmp	r7, #88	; 0x58
 8005d88:	f000 80a3 	beq.w	8005ed2 <_printf_i+0x16e>
 8005d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d94:	e03a      	b.n	8005e0c <_printf_i+0xa8>
 8005d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d9a:	2b15      	cmp	r3, #21
 8005d9c:	d8f6      	bhi.n	8005d8c <_printf_i+0x28>
 8005d9e:	a101      	add	r1, pc, #4	; (adr r1, 8005da4 <_printf_i+0x40>)
 8005da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da4:	08005dfd 	.word	0x08005dfd
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005d8d 	.word	0x08005d8d
 8005db0:	08005d8d 	.word	0x08005d8d
 8005db4:	08005d8d 	.word	0x08005d8d
 8005db8:	08005d8d 	.word	0x08005d8d
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005d8d 	.word	0x08005d8d
 8005dc4:	08005d8d 	.word	0x08005d8d
 8005dc8:	08005d8d 	.word	0x08005d8d
 8005dcc:	08005d8d 	.word	0x08005d8d
 8005dd0:	08005f1d 	.word	0x08005f1d
 8005dd4:	08005e41 	.word	0x08005e41
 8005dd8:	08005eff 	.word	0x08005eff
 8005ddc:	08005d8d 	.word	0x08005d8d
 8005de0:	08005d8d 	.word	0x08005d8d
 8005de4:	08005f3f 	.word	0x08005f3f
 8005de8:	08005d8d 	.word	0x08005d8d
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005d8d 	.word	0x08005d8d
 8005df4:	08005d8d 	.word	0x08005d8d
 8005df8:	08005f07 	.word	0x08005f07
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	1d1a      	adds	r2, r3, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	602a      	str	r2, [r5, #0]
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0a3      	b.n	8005f58 <_printf_i+0x1f4>
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	6829      	ldr	r1, [r5, #0]
 8005e14:	0606      	lsls	r6, r0, #24
 8005e16:	f101 0304 	add.w	r3, r1, #4
 8005e1a:	d50a      	bpl.n	8005e32 <_printf_i+0xce>
 8005e1c:	680e      	ldr	r6, [r1, #0]
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	2e00      	cmp	r6, #0
 8005e22:	da03      	bge.n	8005e2c <_printf_i+0xc8>
 8005e24:	232d      	movs	r3, #45	; 0x2d
 8005e26:	4276      	negs	r6, r6
 8005e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2c:	485e      	ldr	r0, [pc, #376]	; (8005fa8 <_printf_i+0x244>)
 8005e2e:	230a      	movs	r3, #10
 8005e30:	e019      	b.n	8005e66 <_printf_i+0x102>
 8005e32:	680e      	ldr	r6, [r1, #0]
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e3a:	bf18      	it	ne
 8005e3c:	b236      	sxthne	r6, r6
 8005e3e:	e7ef      	b.n	8005e20 <_printf_i+0xbc>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	6820      	ldr	r0, [r4, #0]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	6029      	str	r1, [r5, #0]
 8005e48:	0601      	lsls	r1, r0, #24
 8005e4a:	d501      	bpl.n	8005e50 <_printf_i+0xec>
 8005e4c:	681e      	ldr	r6, [r3, #0]
 8005e4e:	e002      	b.n	8005e56 <_printf_i+0xf2>
 8005e50:	0646      	lsls	r6, r0, #25
 8005e52:	d5fb      	bpl.n	8005e4c <_printf_i+0xe8>
 8005e54:	881e      	ldrh	r6, [r3, #0]
 8005e56:	4854      	ldr	r0, [pc, #336]	; (8005fa8 <_printf_i+0x244>)
 8005e58:	2f6f      	cmp	r7, #111	; 0x6f
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2308      	moveq	r3, #8
 8005e5e:	230a      	movne	r3, #10
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e66:	6865      	ldr	r5, [r4, #4]
 8005e68:	60a5      	str	r5, [r4, #8]
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	bfa2      	ittt	ge
 8005e6e:	6821      	ldrge	r1, [r4, #0]
 8005e70:	f021 0104 	bicge.w	r1, r1, #4
 8005e74:	6021      	strge	r1, [r4, #0]
 8005e76:	b90e      	cbnz	r6, 8005e7c <_printf_i+0x118>
 8005e78:	2d00      	cmp	r5, #0
 8005e7a:	d04d      	beq.n	8005f18 <_printf_i+0x1b4>
 8005e7c:	4615      	mov	r5, r2
 8005e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e82:	fb03 6711 	mls	r7, r3, r1, r6
 8005e86:	5dc7      	ldrb	r7, [r0, r7]
 8005e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e8c:	4637      	mov	r7, r6
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	460e      	mov	r6, r1
 8005e92:	d9f4      	bls.n	8005e7e <_printf_i+0x11a>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10b      	bne.n	8005eb0 <_printf_i+0x14c>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07de      	lsls	r6, r3, #31
 8005e9c:	d508      	bpl.n	8005eb0 <_printf_i+0x14c>
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	bfde      	ittt	le
 8005ea6:	2330      	movle	r3, #48	; 0x30
 8005ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eb0:	1b52      	subs	r2, r2, r5
 8005eb2:	6122      	str	r2, [r4, #16]
 8005eb4:	f8cd a000 	str.w	sl, [sp]
 8005eb8:	464b      	mov	r3, r9
 8005eba:	aa03      	add	r2, sp, #12
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7ff fee2 	bl	8005c88 <_printf_common>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d14c      	bne.n	8005f62 <_printf_i+0x1fe>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b004      	add	sp, #16
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	4835      	ldr	r0, [pc, #212]	; (8005fa8 <_printf_i+0x244>)
 8005ed4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ed8:	6829      	ldr	r1, [r5, #0]
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ee0:	6029      	str	r1, [r5, #0]
 8005ee2:	061d      	lsls	r5, r3, #24
 8005ee4:	d514      	bpl.n	8005f10 <_printf_i+0x1ac>
 8005ee6:	07df      	lsls	r7, r3, #31
 8005ee8:	bf44      	itt	mi
 8005eea:	f043 0320 	orrmi.w	r3, r3, #32
 8005eee:	6023      	strmi	r3, [r4, #0]
 8005ef0:	b91e      	cbnz	r6, 8005efa <_printf_i+0x196>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f023 0320 	bic.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	2310      	movs	r3, #16
 8005efc:	e7b0      	b.n	8005e60 <_printf_i+0xfc>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	f043 0320 	orr.w	r3, r3, #32
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	2378      	movs	r3, #120	; 0x78
 8005f08:	4828      	ldr	r0, [pc, #160]	; (8005fac <_printf_i+0x248>)
 8005f0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f0e:	e7e3      	b.n	8005ed8 <_printf_i+0x174>
 8005f10:	0659      	lsls	r1, r3, #25
 8005f12:	bf48      	it	mi
 8005f14:	b2b6      	uxthmi	r6, r6
 8005f16:	e7e6      	b.n	8005ee6 <_printf_i+0x182>
 8005f18:	4615      	mov	r5, r2
 8005f1a:	e7bb      	b.n	8005e94 <_printf_i+0x130>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	6826      	ldr	r6, [r4, #0]
 8005f20:	6961      	ldr	r1, [r4, #20]
 8005f22:	1d18      	adds	r0, r3, #4
 8005f24:	6028      	str	r0, [r5, #0]
 8005f26:	0635      	lsls	r5, r6, #24
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	d501      	bpl.n	8005f30 <_printf_i+0x1cc>
 8005f2c:	6019      	str	r1, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <_printf_i+0x1d2>
 8005f30:	0670      	lsls	r0, r6, #25
 8005f32:	d5fb      	bpl.n	8005f2c <_printf_i+0x1c8>
 8005f34:	8019      	strh	r1, [r3, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	4615      	mov	r5, r2
 8005f3c:	e7ba      	b.n	8005eb4 <_printf_i+0x150>
 8005f3e:	682b      	ldr	r3, [r5, #0]
 8005f40:	1d1a      	adds	r2, r3, #4
 8005f42:	602a      	str	r2, [r5, #0]
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f7fa f978 	bl	8000240 <memchr>
 8005f50:	b108      	cbz	r0, 8005f56 <_printf_i+0x1f2>
 8005f52:	1b40      	subs	r0, r0, r5
 8005f54:	6060      	str	r0, [r4, #4]
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f60:	e7a8      	b.n	8005eb4 <_printf_i+0x150>
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	462a      	mov	r2, r5
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	47d0      	blx	sl
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d0ab      	beq.n	8005ec8 <_printf_i+0x164>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	079b      	lsls	r3, r3, #30
 8005f74:	d413      	bmi.n	8005f9e <_printf_i+0x23a>
 8005f76:	68e0      	ldr	r0, [r4, #12]
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	4298      	cmp	r0, r3
 8005f7c:	bfb8      	it	lt
 8005f7e:	4618      	movlt	r0, r3
 8005f80:	e7a4      	b.n	8005ecc <_printf_i+0x168>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4632      	mov	r2, r6
 8005f86:	4649      	mov	r1, r9
 8005f88:	4640      	mov	r0, r8
 8005f8a:	47d0      	blx	sl
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d09b      	beq.n	8005ec8 <_printf_i+0x164>
 8005f90:	3501      	adds	r5, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	9903      	ldr	r1, [sp, #12]
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	dcf2      	bgt.n	8005f82 <_printf_i+0x21e>
 8005f9c:	e7eb      	b.n	8005f76 <_printf_i+0x212>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	f104 0619 	add.w	r6, r4, #25
 8005fa4:	e7f5      	b.n	8005f92 <_printf_i+0x22e>
 8005fa6:	bf00      	nop
 8005fa8:	0800633d 	.word	0x0800633d
 8005fac:	0800634e 	.word	0x0800634e

08005fb0 <_sbrk_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d06      	ldr	r5, [pc, #24]	; (8005fcc <_sbrk_r+0x1c>)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	602b      	str	r3, [r5, #0]
 8005fbc:	f7fb f98c 	bl	80012d8 <_sbrk>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_sbrk_r+0x1a>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_sbrk_r+0x1a>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	20010cbc 	.word	0x20010cbc

08005fd0 <__sread>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd8:	f000 f8a8 	bl	800612c <_read_r>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	bfab      	itete	ge
 8005fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8005fe4:	181b      	addge	r3, r3, r0
 8005fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fea:	bfac      	ite	ge
 8005fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fee:	81a3      	strhlt	r3, [r4, #12]
 8005ff0:	bd10      	pop	{r4, pc}

08005ff2 <__swrite>:
 8005ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff6:	461f      	mov	r7, r3
 8005ff8:	898b      	ldrh	r3, [r1, #12]
 8005ffa:	05db      	lsls	r3, r3, #23
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	460c      	mov	r4, r1
 8006000:	4616      	mov	r6, r2
 8006002:	d505      	bpl.n	8006010 <__swrite+0x1e>
 8006004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006008:	2302      	movs	r3, #2
 800600a:	2200      	movs	r2, #0
 800600c:	f000 f870 	bl	80060f0 <_lseek_r>
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	4632      	mov	r2, r6
 800601e:	463b      	mov	r3, r7
 8006020:	4628      	mov	r0, r5
 8006022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006026:	f000 b817 	b.w	8006058 <_write_r>

0800602a <__sseek>:
 800602a:	b510      	push	{r4, lr}
 800602c:	460c      	mov	r4, r1
 800602e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006032:	f000 f85d 	bl	80060f0 <_lseek_r>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	bf15      	itete	ne
 800603c:	6560      	strne	r0, [r4, #84]	; 0x54
 800603e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006046:	81a3      	strheq	r3, [r4, #12]
 8006048:	bf18      	it	ne
 800604a:	81a3      	strhne	r3, [r4, #12]
 800604c:	bd10      	pop	{r4, pc}

0800604e <__sclose>:
 800604e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006052:	f000 b81b 	b.w	800608c <_close_r>
	...

08006058 <_write_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4d07      	ldr	r5, [pc, #28]	; (8006078 <_write_r+0x20>)
 800605c:	4604      	mov	r4, r0
 800605e:	4608      	mov	r0, r1
 8006060:	4611      	mov	r1, r2
 8006062:	2200      	movs	r2, #0
 8006064:	602a      	str	r2, [r5, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	f7fb f8e5 	bl	8001236 <_write>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d102      	bne.n	8006076 <_write_r+0x1e>
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	b103      	cbz	r3, 8006076 <_write_r+0x1e>
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	20010cbc 	.word	0x20010cbc

0800607c <abort>:
 800607c:	b508      	push	{r3, lr}
 800607e:	2006      	movs	r0, #6
 8006080:	f000 f88e 	bl	80061a0 <raise>
 8006084:	2001      	movs	r0, #1
 8006086:	f7fb f8af 	bl	80011e8 <_exit>
	...

0800608c <_close_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d06      	ldr	r5, [pc, #24]	; (80060a8 <_close_r+0x1c>)
 8006090:	2300      	movs	r3, #0
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	f7fb f8e9 	bl	800126e <_close>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_close_r+0x1a>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_close_r+0x1a>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20010cbc 	.word	0x20010cbc

080060ac <_fstat_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d07      	ldr	r5, [pc, #28]	; (80060cc <_fstat_r+0x20>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	f7fb f8e4 	bl	8001286 <_fstat>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	d102      	bne.n	80060c8 <_fstat_r+0x1c>
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	b103      	cbz	r3, 80060c8 <_fstat_r+0x1c>
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	bd38      	pop	{r3, r4, r5, pc}
 80060ca:	bf00      	nop
 80060cc:	20010cbc 	.word	0x20010cbc

080060d0 <_isatty_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d06      	ldr	r5, [pc, #24]	; (80060ec <_isatty_r+0x1c>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	f7fb f8e3 	bl	80012a6 <_isatty>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_isatty_r+0x1a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_isatty_r+0x1a>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	20010cbc 	.word	0x20010cbc

080060f0 <_lseek_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d07      	ldr	r5, [pc, #28]	; (8006110 <_lseek_r+0x20>)
 80060f4:	4604      	mov	r4, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fb f8dc 	bl	80012bc <_lseek>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_lseek_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_lseek_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20010cbc 	.word	0x20010cbc

08006114 <__malloc_lock>:
 8006114:	4801      	ldr	r0, [pc, #4]	; (800611c <__malloc_lock+0x8>)
 8006116:	f7ff bb0e 	b.w	8005736 <__retarget_lock_acquire_recursive>
 800611a:	bf00      	nop
 800611c:	20010cb0 	.word	0x20010cb0

08006120 <__malloc_unlock>:
 8006120:	4801      	ldr	r0, [pc, #4]	; (8006128 <__malloc_unlock+0x8>)
 8006122:	f7ff bb09 	b.w	8005738 <__retarget_lock_release_recursive>
 8006126:	bf00      	nop
 8006128:	20010cb0 	.word	0x20010cb0

0800612c <_read_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d07      	ldr	r5, [pc, #28]	; (800614c <_read_r+0x20>)
 8006130:	4604      	mov	r4, r0
 8006132:	4608      	mov	r0, r1
 8006134:	4611      	mov	r1, r2
 8006136:	2200      	movs	r2, #0
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fb f85e 	bl	80011fc <_read>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_read_r+0x1e>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_read_r+0x1e>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	20010cbc 	.word	0x20010cbc

08006150 <_raise_r>:
 8006150:	291f      	cmp	r1, #31
 8006152:	b538      	push	{r3, r4, r5, lr}
 8006154:	4604      	mov	r4, r0
 8006156:	460d      	mov	r5, r1
 8006158:	d904      	bls.n	8006164 <_raise_r+0x14>
 800615a:	2316      	movs	r3, #22
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	f04f 30ff 	mov.w	r0, #4294967295
 8006162:	bd38      	pop	{r3, r4, r5, pc}
 8006164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006166:	b112      	cbz	r2, 800616e <_raise_r+0x1e>
 8006168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800616c:	b94b      	cbnz	r3, 8006182 <_raise_r+0x32>
 800616e:	4620      	mov	r0, r4
 8006170:	f000 f830 	bl	80061d4 <_getpid_r>
 8006174:	462a      	mov	r2, r5
 8006176:	4601      	mov	r1, r0
 8006178:	4620      	mov	r0, r4
 800617a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800617e:	f000 b817 	b.w	80061b0 <_kill_r>
 8006182:	2b01      	cmp	r3, #1
 8006184:	d00a      	beq.n	800619c <_raise_r+0x4c>
 8006186:	1c59      	adds	r1, r3, #1
 8006188:	d103      	bne.n	8006192 <_raise_r+0x42>
 800618a:	2316      	movs	r3, #22
 800618c:	6003      	str	r3, [r0, #0]
 800618e:	2001      	movs	r0, #1
 8006190:	e7e7      	b.n	8006162 <_raise_r+0x12>
 8006192:	2400      	movs	r4, #0
 8006194:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006198:	4628      	mov	r0, r5
 800619a:	4798      	blx	r3
 800619c:	2000      	movs	r0, #0
 800619e:	e7e0      	b.n	8006162 <_raise_r+0x12>

080061a0 <raise>:
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <raise+0xc>)
 80061a2:	4601      	mov	r1, r0
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	f7ff bfd3 	b.w	8006150 <_raise_r>
 80061aa:	bf00      	nop
 80061ac:	2000000c 	.word	0x2000000c

080061b0 <_kill_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d07      	ldr	r5, [pc, #28]	; (80061d0 <_kill_r+0x20>)
 80061b4:	2300      	movs	r3, #0
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	4611      	mov	r1, r2
 80061bc:	602b      	str	r3, [r5, #0]
 80061be:	f7fb f803 	bl	80011c8 <_kill>
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	d102      	bne.n	80061cc <_kill_r+0x1c>
 80061c6:	682b      	ldr	r3, [r5, #0]
 80061c8:	b103      	cbz	r3, 80061cc <_kill_r+0x1c>
 80061ca:	6023      	str	r3, [r4, #0]
 80061cc:	bd38      	pop	{r3, r4, r5, pc}
 80061ce:	bf00      	nop
 80061d0:	20010cbc 	.word	0x20010cbc

080061d4 <_getpid_r>:
 80061d4:	f7fa bff0 	b.w	80011b8 <_getpid>

080061d8 <_gettimeofday>:
 80061d8:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <_gettimeofday+0xc>)
 80061da:	2258      	movs	r2, #88	; 0x58
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	4770      	bx	lr
 80061e4:	20010cbc 	.word	0x20010cbc

080061e8 <_init>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr

080061f4 <_fini>:
 80061f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f6:	bf00      	nop
 80061f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fa:	bc08      	pop	{r3}
 80061fc:	469e      	mov	lr, r3
 80061fe:	4770      	bx	lr
